{
	"info": {
		"_postman_id": "6eb8d4e0-5b3d-45b7-94fc-b0c1bf3b49ee",
		"name": "Whispir REST API",
		"description": "**Whispir REST API Collection**\n\nThe Postman Whispir REST API collection is a fully parameterised system of API requests to assist developers in understanding the function and purpose of each of the Whispir API methods.\n\nTo use the API Collection, create an environment with the following variables.\n\n_base-url_ - points to your api region https://api.au.whispir.com\n_x-api-key_ - given to you by your Whispir admin\n_whispir-username_ - given to you by your Whispir admin\n_whispir-password_ - given to you by your Whispir admin\n\n\n**Limitations**\nCurrently the collection only reports values in JSON",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Activities",
			"item": [
				{
					"name": "Activities [Global]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.activity-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/activities",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"activities"
							],
							"query": [
								{
									"key": "action",
									"value": "Map",
									"disabled": true
								},
								{
									"key": "module",
									"value": "Message",
									"disabled": true
								},
								{
									"key": "user",
									"value": "jason",
									"disabled": true
								},
								{
									"key": "workspaceName",
									"value": "sandbox",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Successful",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Imported",
									"disabled": true
								},
								{
									"key": "startTime",
									"value": "01/01/2020%2000:00",
									"disabled": true
								},
								{
									"key": "endTime",
									"value": "01/01/2021%2000:00",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								}
							]
						},
						"description": "All parameters are optional and not all combinations are valid.\n\n**Action**\nCreate\nUpdate\nMove\nCopy\nDraft\nSend\nModified\nDelete\nContact Import File\nLogin\nApprove\nReject\nDispatch\nRegister\nAccept\nClosed\nMap\nUn-map\n\n**Module**\nSystem\nMessage\nScheduled Message\nUser\nContact\nDistributionList\nTemplate\nWorkspace\nEvent\nWebService\nSettings\nConversation\nGateway\nWorkspace Mapping\nFolders\nTeam\nRSS\nAPI Mapping\nAsset\nInstruction\n\n**Status**\nSuccessful\nFailed\nRejected"
					},
					"response": []
				},
				{
					"name": "Activities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.activity-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/activities",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"activities"
							],
							"query": [
								{
									"key": "action",
									"value": "Map",
									"disabled": true
								},
								{
									"key": "module",
									"value": "Message",
									"disabled": true
								},
								{
									"key": "user",
									"value": "jason",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Successful",
									"disabled": true
								},
								{
									"key": "description",
									"value": "Imported",
									"disabled": true
								},
								{
									"key": "startTime",
									"value": "01/01/2019%2000:00",
									"disabled": true
								},
								{
									"key": "endTime",
									"value": "01/01/2019%2000:00",
									"disabled": true
								}
							]
						},
						"description": "All parameters are optional and not all combinations are valid.\n\nFree text parameters are 'contains' matched.\n\n**Actions**\nCreate\nUpdate\nMove\nCopy\nDraft\nSend\nModified\nDelete\nContact Import File\nLogin\nApprove\nReject\nDispatch\nRegister\nAccept\nClosed\nMap\nUn-Map\nIVR Connection\nPublish\n\n**Modules**\nSystem\nMessage\nScheduled Message\nUser\nContact\nDistributionList\nTemplate\nWorkspace\nEvent\nWebService\nSettings\nConversation\nGateway\nWorkspace Mapping\nFolders\nTeam\nRSS\nAPI Mapping\nAsset\nInstruction\nIVR\nAnnouncement\n2FA\nMessage Publish\nTwitter\nFacebook\n\n**Statuses**\nFailed\nSuccessful\nRejected"
					},
					"response": []
				},
				{
					"name": "Activities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.activity-v1+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.activity-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"module\": \"Message\",\n  \"action\" : \"Send\",\n  \"status\" : \"Successful\",\n  \"description\" : \"Message sent via REST API\"\n}"
						},
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/activities",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"activities"
							]
						},
						"description": "All parameters are optional and not all combinations are valid.\n\n**Action**\nCreate\nUpdate\nMove\nCopy\nDraft\nSend\nModified\nDelete\nContact Import File\nLogin\nApprove\nReject\nDispatch\nRegister\nAccept\nClosed\nMap\nUn-map\n\n**Module**\nSystem\nMessage\nScheduled Message\nUser\nContact\nDistributionList\nTemplate\nWorkspace\nEvent\nWebService\nSettings\nConversation\nGateway\nWorkspace Mapping\nFolders\nTeam\nRSS\nAPI Mapping\nAsset\nInstruction\n\n**Status**\nSuccessful\nFailed\nRejected"
					},
					"response": []
				}
			],
			"description": "https://developers.whispir.com/docs/activities"
		},
		{
			"name": "Callbacks",
			"item": [
				{
					"name": "Callbacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"1 Callback or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.callbacks).to.to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/callbacks",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"callbacks"
							],
							"query": [
								{
									"key": "offset",
									"value": "40",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Callbacks [name]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"1 Callback or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.callbacks).to.to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/callbacks",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"callbacks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Callback [id]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// set this workspace as JSON blob into the workspace variable",
									"pm.environment.set('callback', responseBody)",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('callback-location', postman.getResponseHeader('Location'))",
									"",
									"callback = JSON.parse(responseBody)",
									"pm.environment.set('callback-name', callback.name)",
									"// set each of the accessible methods into a named variable",
									"callback.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/callbacks/{{callback-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"callbacks",
								"{{callback-id}}"
							]
						},
						"description": "Gets the callback details and methods based on _callback id_."
					},
					"response": []
				},
				{
					"name": "Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.environment.set('callback-name', JSON.parse(responseBody).name)",
									"pm.environment.set('callback-id', JSON.parse(responseBody).id)",
									"",
									"// set this workspace as JSON blob into the workspace variable",
									"pm.environment.set('callback', responseBody)",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('callback-location', postman.getResponseHeader('Location'))",
									"callback = JSON.parse(responseBody)",
									"// set each of the accessible methods into a named variable",
									"callback.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"Test Callback {{$timestamp}}\",\r\n  \"url\" : \"{{callback-url}}\",\r\n  \"contentType\" : \"json\",\r\n  \"removeHTML\" : \"disabled\",\r\n  \"retriesEnabled\" : \"true\",\r\n  \"email\" : \"{{test-email}}\",\r\n  \"auth\" : {\r\n\t\"type\" : \"httpheader\",\r\n\t\"key\" : \"HTTP_HEADER_KEY\"\r\n  },\r\n  \"callbacks\" : {\r\n    \"reply\" : \"enabled\",\r\n    \"undeliverable\" : \"enabled\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/callbacks",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"callbacks"
							]
						},
						"description": "Call a nominated URL with payload on receipt of return message.  For testing you should use an open webhook (webhook.site) which requires minimal configuration and accepts all incoming connections before attempting to model a specific configuration in the callback parameters below."
					},
					"response": []
				},
				{
					"name": "Callback",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// this needs work to retrieve the previous parameters and then update only the new params",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test Callback {{$timestamp}}\",\r\n  \"url\": \"{{callback-url}}\",\r\n  \"auth\": {\r\n    \"type\": \"bearertoken\",\r\n    \"key\": \"\"\r\n  },\r\n  \"contentType\": \"json\",\r\n  \"removeHTML\": \"enabled\",\r\n  \"retriesEnabled\": \"false\",\r\n  \"email\": \"test@example.com\",\r\n  \"callbacks\": {\r\n    \"reply\": \"enabled\",\r\n    \"undeliverable\": \"enabled\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{callback-location}}",
							"host": [
								"{{callback-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Callback History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.api-call-v1+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.api-call-v1+json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{retrieveCallbackHistory}}?status=FAILED",
							"host": [
								"{{retrieveCallbackHistory}}"
							],
							"query": [
								{
									"key": "status",
									"value": "FAILED"
								}
							]
						},
						"description": "Retrieve the list of callbacks for a nominated callback.  Ensure the callback links are prepopulated by using the _POST Callback_ or _GET Callback [id]_ request first."
					},
					"response": []
				},
				{
					"name": "Callback History JSON",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.api-call-v1+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.api-call-v1+json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base-url}}/callbacks/1FABCFF46C5935A3/calls?status=FAILED",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"callbacks",
								"1FABCFF46C5935A3",
								"calls"
							],
							"query": [
								{
									"key": "status",
									"value": "FAILED"
								}
							]
						},
						"description": "Retrieve the list of callbacks for a nominated callback.  Ensure the callback links are prepopulated by using the _POST Callback_ or _GET Callback [id]_ request first."
					},
					"response": []
				},
				{
					"name": "Callback",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.api-callback-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{deleteCallback}}",
							"host": [
								"{{deleteCallback}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveContacts}}",
							"host": [
								"{{retrieveContacts}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "asc",
									"disabled": true
								},
								{
									"key": "sortFields",
									"value": "firstName,lastName",
									"disabled": true
								},
								{
									"key": "firstName",
									"value": "",
									"disabled": true
								},
								{
									"key": "lastName",
									"value": "",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "0",
									"disabled": true
								},
								{
									"key": "customFields",
									"value": "true",
									"disabled": true
								},
								{
									"key": "companyName",
									"value": "Hoppe Group Inc",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "firstName,lastName,custom_pin",
									"disabled": true
								},
								{
									"key": "division",
									"value": "inter",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('contact-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var contact = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"contact.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"title\" : \"{{$randomNamePrefix}}\",\r\n    \"status\": \"A\",\r\n    \"companyName\" : \"{{$randomCompanyName}} {{$randomCompanySuffix}}\",\r\n    \"jobTitle\" : \"{{$randomJobDescriptor}} {{$randomJobTitle}}\",\r\n    \"division\":\"{{$randomJobArea}}\",\r\n    \"businessUnit\":\"{{$randomBs}}\",\r\n    \"department\":\"{{$randomBs}}\",\r\n    \"teamName1\":\"{{$randomCatchPhraseAdjective}} {{$randomCatchPhraseNoun}}\",\r\n    \"role1\":\"{{$randomCatchPhrase}}\",\r\n    \"teamName2\":\"\",\r\n    \"role2\":\"\",\r\n    \r\n\t\"workAddress1\":\"{{$randomStreetAddress}}\", \r\n\t\"workSuburb\":\"{{$randomCity}}\", \r\n\t\"workPostCode\":\"{{$randomInt}}\", \r\n\t\"workPostalAddress1\":\"\", \r\n\t\"workPostalSuburb\":\"\", \r\n\t\"workPostalPostCode\":\"\", \r\n    \r\n    \"workEmailAddress2\": \"\",\r\n    \"workAddress2\": \"\",\r\n    \"workState\": \"\",\r\n    \"workPostalAddress2\": \"\",\r\n    \"workPostalState\": \"\",\r\n    \"workPostalCountry\": \"\",\r\n    \r\n\t\"workPhoneAreaCode1\": \"\", \r\n\t\"workPhoneAreaCode2\": \"\", \r\n\t\"workFaxAreaCode1\": \"\", \r\n\t\"workSetellitePhone\": \"\", \r\n    \r\n    \"workMobilePhone2\":\"\",\r\n    \"workPhone1\":\"\",\r\n    \"workPhone2\":\"\",\r\n    \"workFax1\":\"\",\r\n    \"WorkOtherPhone\":\"\",\r\n    \r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{test-email}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\",\r\n    \"messagingoptions\": [{\r\n          \"channel\": \"sms\",\r\n          \"enabled\": \"true\",\r\n          \"primary\": \"WorkMobilePhone1\"\r\n    },{\r\n          \"channel\": \"email\",\r\n          \"enabled\": \"true\",\r\n          \"primary\": \"WorkEmailAddress1\"\r\n    },{\r\n          \"channel\": \"voice\",\r\n          \"enabled\": \"true\",\r\n          \"primary\": \"WorkMobilePhone1\"\r\n    }],\r\n    \"locations\": [\r\n        {\r\n          \"latitude\": \"{{$randomLatitude}}\",\r\n          \"longitude\": \"{{$randomLongitude}}\",\r\n          \"type\": \"CurrentLocation\"\r\n        }\r\n      ]\r\n}"
						},
						"url": {
							"raw": "{{createContact}}",
							"host": [
								"{{createContact}}"
							]
						},
						"description": "Create a new contact"
					},
					"response": []
				},
				{
					"name": "Contact Custom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('contact-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var contact = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"contact.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"title\": \"{{$randomNamePrefix}}\",\r\n    \"status\": \"A\",\r\n    \"companyName\": \"{{$randomCompanyName}} {{$randomCompanySuffix}}\",\r\n    \"jobTitle\": \"{{$randomJobDescriptor}} {{$randomJobTitle}}\",\r\n    \"division\": \"{{$randomJobArea}}\",\r\n    \"businessUnit\": \"{{$randomBs}}\",\r\n    \"department\": \"{{$randomBs}}\",\r\n    \"teamName1\": \"{{$randomCatchPhraseAdjective}} {{$randomCatchPhraseNoun}}\",\r\n    \"role1\": \"{{$randomCatchPhrase}}\",\r\n    \"teamName2\": \"\",\r\n    \"role2\": \"\",\r\n    \"workAddress1\": \"{{$randomStreetAddress}}\",\r\n    \"workSuburb\": \"{{$randomCity}}\",\r\n    \"workPostCode\": \"{{$randomInt}}\",\r\n    \"workPostalAddress1\": \"\",\r\n    \"workPostalSuburb\": \"\",\r\n    \"workPostalPostCode\": \"\",\r\n    \"workEmailAddress2\": \"\",\r\n    \"workAddress2\": \"\",\r\n    \"workState\": \"\",\r\n    \"workPostalAddress2\": \"\",\r\n    \"workPostalState\": \"\",\r\n    \"workPostalCountry\": \"\",\r\n    \"workPhoneAreaCode1\": \"\",\r\n    \"workPhoneAreaCode2\": \"\",\r\n    \"workFaxAreaCode1\": \"\",\r\n    \"workSetellitePhone\": \"\",\r\n    \"workMobilePhone2\": \"\",\r\n    \"workPhone1\": \"\",\r\n    \"workPhone2\": \"\",\r\n    \"workFax1\": \"\",\r\n    \"WorkOtherPhone\": \"\",\r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{test-email}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\",\r\n    \"messagingoptions\": [\r\n        {\r\n            \"channel\": \"sms\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        },\r\n        {\r\n            \"channel\": \"email\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkEmailAddress1\"\r\n        },\r\n        {\r\n            \"channel\": \"voice\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        }\r\n    ],\r\n    \"locations\": [\r\n        {\r\n            \"latitude\": \"{{$randomLatitude}}\",\r\n            \"longitude\": \"{{$randomLongitude}}\",\r\n            \"type\": \"CurrentLocation\"\r\n        }\r\n    ],\r\n    \"customFields\": [\r\n        {\r\n            \"fieldName\": \"Field Name\",\r\n            \"fieldValue\": \"1234\",\r\n            \"searchKey\": \"custom_fieldName\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "https://54.153.215.245/workspaces/D85E1B2FE68A9EF9/contacts",
							"protocol": "https",
							"host": [
								"54",
								"153",
								"215",
								"245"
							],
							"path": [
								"workspaces",
								"D85E1B2FE68A9EF9",
								"contacts"
							]
						},
						"description": "Create a new contact"
					},
					"response": []
				},
				{
					"name": "Contact [location]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.contact-v1+json"
							}
						],
						"url": {
							"raw": "{{contact-location}}",
							"host": [
								"{{contact-location}}"
							],
							"query": [
								{
									"key": "customFields",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Get a contact from _contact-location_ returned from POST /contact"
					},
					"response": []
				},
				{
					"name": "Contact [id]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.contact-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveContacts}}/{{contact-id}}",
							"host": [
								"{{retrieveContacts}}"
							],
							"path": [
								"{{contact-id}}"
							],
							"query": [
								{
									"key": "customFields",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "Get a contact from _contact-location_ returned from POST /contact"
					},
					"response": []
				},
				{
					"name": "Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"title\": \"{{$randomNamePrefix}}\",\r\n    \"status\": \"A\",\r\n    \"companyName\": \"{{$randomCompanyName}} {{$randomCompanySuffix}}\",\r\n    \"jobTitle\": \"{{$randomJobDescriptor}} {{$randomJobTitle}}\",\r\n    \"division\": \"{{$randomJobArea}}\",\r\n    \"businessUnit\": \"{{$randomBs}}\",\r\n    \"department\": \"{{$randomBs}}\",\r\n    \"teamName1\": \"{{$randomCatchPhraseAdjective}} {{$randomCatchPhraseNoun}}\",\r\n    \"role1\": \"{{$randomCatchPhrase}}\",\r\n    \"teamName2\": \"\",\r\n    \"role2\": \"\",\r\n    \"workAddress1\": \"{{$randomStreetAddress}}\",\r\n    \"workSuburb\": \"{{$randomCity}}\",\r\n    \"workPostCode\": \"{{$randomInt}}\",\r\n    \"workPostalAddress1\": \"\",\r\n    \"workPostalSuburb\": \"\",\r\n    \"workPostalPostCode\": \"\",\r\n    \"workEmailAddress2\": \"\",\r\n    \"workAddress2\": \"\",\r\n    \"workState\": \"\",\r\n    \"workPostalAddress2\": \"\",\r\n    \"workPostalState\": \"\",\r\n    \"workPostalCountry\": \"\",\r\n    \"workPhoneAreaCode1\": \"\",\r\n    \"workPhoneAreaCode2\": \"\",\r\n    \"workFaxAreaCode1\": \"\",\r\n    \"workSetellitePhone\": \"\",\r\n    \"workMobilePhone2\": \"\",\r\n    \"workPhone1\": \"\",\r\n    \"workPhone2\": \"\",\r\n    \"workFax1\": \"\",\r\n    \"WorkOtherPhone\": \"\",\r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{test-email}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\",\r\n    \"messagingoptions\": [\r\n        {\r\n            \"channel\": \"sms\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        },\r\n        {\r\n            \"channel\": \"email\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkEmailAddress1\"\r\n        },\r\n        {\r\n            \"channel\": \"voice\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        }\r\n    ],\r\n    \"locations\": [\r\n        {\r\n            \"latitude\": \"{{$randomLatitude}}\",\r\n            \"longitude\": \"{{$randomLongitude}}\",\r\n            \"type\": \"CurrentLocation\"\r\n        }\r\n    ],\r\n    \"customFields\": [\r\n          {\r\n              \"fieldName\": \"Field Name\",\r\n              \"fieldValue\": \"1234\",\r\n              \"searchKey\": \"custom_fieldName\"\r\n            }\r\n      ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{updateContact}}",
							"host": [
								"{{updateContact}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact Custom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"title\": \"{{$randomNamePrefix}}\",\r\n    \"status\": \"A\",\r\n    \"companyName\": \"{{$randomCompanyName}} {{$randomCompanySuffix}}\",\r\n    \"jobTitle\": \"{{$randomJobDescriptor}} {{$randomJobTitle}}\",\r\n    \"division\": \"{{$randomJobArea}}\",\r\n    \"businessUnit\": \"{{$randomBs}}\",\r\n    \"department\": \"{{$randomBs}}\",\r\n    \"teamName1\": \"{{$randomCatchPhraseAdjective}} {{$randomCatchPhraseNoun}}\",\r\n    \"role1\": \"{{$randomCatchPhrase}}\",\r\n    \"teamName2\": \"\",\r\n    \"role2\": \"\",\r\n    \"workAddress1\": \"{{$randomStreetAddress}}\",\r\n    \"workSuburb\": \"{{$randomCity}}\",\r\n    \"workPostCode\": \"{{$randomInt}}\",\r\n    \"workPostalAddress1\": \"\",\r\n    \"workPostalSuburb\": \"\",\r\n    \"workPostalPostCode\": \"\",\r\n    \"workEmailAddress2\": \"\",\r\n    \"workAddress2\": \"\",\r\n    \"workState\": \"\",\r\n    \"workPostalAddress2\": \"\",\r\n    \"workPostalState\": \"\",\r\n    \"workPostalCountry\": \"\",\r\n    \"workPhoneAreaCode1\": \"\",\r\n    \"workPhoneAreaCode2\": \"\",\r\n    \"workFaxAreaCode1\": \"\",\r\n    \"workSetellitePhone\": \"\",\r\n    \"workMobilePhone2\": \"\",\r\n    \"workPhone1\": \"\",\r\n    \"workPhone2\": \"\",\r\n    \"workFax1\": \"\",\r\n    \"WorkOtherPhone\": \"\",\r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{test-email}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\",\r\n    \"messagingoptions\": [\r\n        {\r\n            \"channel\": \"sms\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        },\r\n        {\r\n            \"channel\": \"email\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkEmailAddress1\"\r\n        },\r\n        {\r\n            \"channel\": \"voice\",\r\n            \"enabled\": \"true\",\r\n            \"primary\": \"WorkMobilePhone1\"\r\n        }\r\n    ],\r\n    \"locations\": [\r\n        {\r\n            \"latitude\": \"{{$randomLatitude}}\",\r\n            \"longitude\": \"{{$randomLongitude}}\",\r\n            \"type\": \"CurrentLocation\"\r\n        }\r\n    ],\r\n    \"customFields\": [\r\n        {\r\n            \"fieldName\": \"Field Name\",\r\n            \"fieldValue\": \"1234\",\r\n            \"searchKey\": \"custom_fieldName\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{updateContact}}",
							"host": [
								"{{updateContact}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{deleteContact}}",
							"host": [
								"{{deleteContact}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Custom Lists",
			"item": [
				{
					"name": "Custom Lists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.customlist-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveResources}}",
							"host": [
								"{{retrieveResources}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Distribution Lists",
			"item": [
				{
					"name": "Distribution Lists",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveDistLists}}",
							"host": [
								"{{retrieveDistLists}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribution List - Static",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the DL location so we can pull up the details",
									"pm.environment.set('distlist-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var dl = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"dl.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Distribution List {{$timestamp}}\",\r\n    \"description\" : \"\",\r\n    \"access\" : \"Open\",\r\n    \"visibility\" : \"Public\",\r\n    \"contactIds\" : \"\",\r\n    \"userIds\" : \"\",\r\n    \"distListIds\" : \"\"\r\n}"
						},
						"url": {
							"raw": "{{createDistList}}",
							"host": [
								"{{createDistList}}"
							]
						},
						"description": "Create a new Distribution List.  Distribution Lists are Unique by name."
					},
					"response": []
				},
				{
					"name": "Distribution List - Dynamic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the DL location so we can pull up the details",
									"pm.environment.set('distlist-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var dl = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"dl.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.distributionlist-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Distribution List {{$timestamp}}\",\r\n    \"description\" : \"\",\r\n    \"access\" : \"Open\",\r\n    \"visibility\" : \"Public\",\r\n    \"contactIds\" : \"\",\r\n    \"userIds\" : \"\",\r\n    \"distListIds\" : \"\",\r\n    \"type\": \"dynamic\",\r\n    \"entityType\":\"contact\",\r\n\t\"rules\": [\r\n    {\r\n      \"ruleFilter\": \"firstName\",\r\n      \"ruleFilterActualName\": \"First Name\",\r\n      \"ruleContent\": \"J*\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{createDistList}}",
							"host": [
								"{{createDistList}}"
							]
						},
						"description": "Create a new Distribution List.  Distribution Lists are Unique by name."
					},
					"response": []
				},
				{
					"name": "Distribution List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//",
									"var dl = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"dl.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{distlist-location}}",
							"host": [
								"{{distlist-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribution List [name]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//",
									"var dl = JSON.parse(responseBody).distributionLists[0]",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('distList-id', dl.id)",
									"pm.environment.set('distList-mri', dl.mri)",
									"",
									"// set each of the accessible methods into a named variable",
									"dl.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/distributionlists?name={{distList-name}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"distributionlists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{distList-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribution List [id]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//",
									"var dl = JSON.parse(responseBody)",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('distList-mri', dl.mri)",
									"",
									"// set each of the accessible methods into a named variable",
									"dl.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.distributionlist-v1+json"
							}
						],
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/distributionlists/{{distList-id}}?offset=0&limit=0",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"distributionlists",
								"{{distList-id}}"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribution List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.distributionlist-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Updated Distribution List {{$timestamp}}\",\r\n    \"description\" : \"\",\r\n    \"access\" : \"Open\",\r\n    \"visibility\" : \"Public\",\r\n    \"contactIds\" : \"\",\r\n    \"userIds\" : \"\",\r\n    \"distListIds\" : \"\"\r\n}"
						},
						"url": {
							"raw": "{{updateDistList}}",
							"host": [
								"{{updateDistList}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Distribution List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{deleteDistList}}",
							"host": [
								"{{deleteDistList}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Imports",
			"item": [
				{
					"name": "1. Resource [JSON]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									" var rawStr = `{\r",
									"    \"contacts\" : [{\r",
									"        \"firstName\": \"Gwen\",\r",
									"        \"lastName\": \"Lee\",\r",
									"        \"workEmailAddress1\": \"${pm.environment.get('test-email')}\",\r",
									"        \"workMobilePhone1\": \"${pm.environment.get('test-sms')}\",\r",
									"        \"workEmailAddress2\": \"${pm.environment.get('test-email')}\",\r",
									"        \"workMobilePhone2\": \"${pm.environment.get('test-sms')}\",\r",
									"        \"workCountry\": \"Australia\",\r",
									"        \"timezone\": \"+10\"\r",
									"    },{\r",
									"        \"firstName\": \"Hamish\",\r",
									"        \"lastName\": \"McAllister\",\r",
									"        \"workEmailAddress1\": \"${pm.environment.get('test-email')}\",\r",
									"        \"workMobilePhone1\": \"${pm.environment.get('test-sms')}\",\r",
									"        \"workEmailAddress2\": \"${pm.environment.get('test-email')}\",\r",
									"        \"workMobilePhone2\": \"${pm.environment.get('test-sms')}\",\r",
									"        \"workCountry\": \"Australia\",\r",
									"        \"timezone\": \"+10\"\r",
									"    }]\r",
									"}`\r",
									"\r",
									"var base64 =  Buffer.from(rawStr).toString('base64')\r",
									"pm.environment.set('resource', base64) "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
									"",
									"// set this workspace as JSON blob into the workspace variable",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('resource-location', postman.getResponseHeader('Location'))",
									"resource = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.whispir.resource-v1+json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.resource-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\" : \"test.csv {{$timestamp}}\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"application/json\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{createResource}}",
							"host": [
								"{{createResource}}"
							]
						},
						"description": "Create a new resource in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables.  Also note that resources are not unique so each use of this request creates a new resource."
					},
					"response": []
				},
				{
					"name": "2. Import Contacts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.importcontact-v1+json",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"resourceId\": \"{{resource-id}}\",\r\n    \"importType\" : \"contact\",\r\n    \"importOptions\": {\r\n        \"fieldMapping\" : {\r\n            \"firstName\": \"firstName\",\r\n            \"lastName\": \"lastName\",\r\n            \"workMobilePhone1\": \"workMobilePhone1\",\r\n            \"workEmailAddress1\":\"workEmailAddress1\",\r\n            \"workMobilePhone2\": \"workMobilePhone2\",\r\n            \"workEmailAddress2\":\"workEmailAddress2\",\r\n            \"workCountry\": \"workCountry\",\r\n            \"timezone\": \"timezone\"\r\n        },\r\n        \"importMode\" : \"replace\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/imports",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"imports"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Messages",
			"item": [
				{
					"name": "SMS Messages",
					"item": [
						{
							"name": "SMS Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"to\": \"{{test-sms}}\",\n    \"subject\": \"Postman Message\",\n    \"body\": \"{{$randomPhrase}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Message Bulk TO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var toCount = Array(10).fill(0)\r",
											"var toField = toCount.map((v,i) => `test${(i)}@mailinator.com`)\r",
											"pm.environment.set('to-field', toField.join(','))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"to\":  \"{{to-field}}\",\n   \"subject\":  \"Postman Message\",\n   \"body\":  \"{{$randomPhrase}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepients are precalculated in pre-Request and set in To: field.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "MMS Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = `iVBORw0KGgoAAAANSUhEUgAAARQAAACLCAYAAACgN2ZbAAAAAXNSR0IArs4c6QAAAARnQU1BAACx\r",
											"jwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAA3wSURBVHhe7d0HrBRFHMfxAX2iKCgqCGJFjajR\r",
											"ROyVgA1LLIhiAwQSFSxEjRp7AhFRQROxoEawoxI1tiBEgr0XBMVCM4KRWFHsoOf9l//6rszs7e7N\r",
											"K7f3/SSbN3M3e+/xHve73ZnZ2Ta5PAMAHrTVrwBQNQIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZA\r",
											"AeANgQLAGwIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwh\r",
											"UAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBv\r",
											"CBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwhUOrMddddZ/r27WtOP/10\r",
											"s3DhQn20vs2ePdscd9xxpk+fPubBBx/UR5FGm1yelpFhq1evNg0NDVprNGHCBHPRRRdprf4cccQR\r",
											"ZubMmVprtGrVKrP22mtrDXERKM1syZIl5ttvvy36z/rPP/+YzTbbzGy99db6iH9t2rTRUrm3337b\r",
											"7L333lqrHw8//LA544wztFasR48eZtGiRVpDXARKM+vfv7956qmntNZo/fXXN7/++qvW/Jo1a5Y5\r",
											"9NBDtVauX79+Zvr06VqrH1tttZVZunSp1sr98ssvpkOHDlpDHPShNLOOHTtqqdimm26qJf8WLFig\r",
											"Jbv3339fSyi0fPlyLSEuAqUO7L777lqyO+igg7RUX9q1a6clu2233VZLiItAqQP77LNPcErlctNN\r",
											"N2mpvtx2221aKrfffvvRKZsCgVInXP0zzz77bNABWY9khOfyyy/XWiM5MnnjjTe0hiQIlDoi/e8v\r",
											"vPCCGTp0qBk/fnxQP+aYY/TZ+jR27Fjz448/mmuuucZceOGF5vXXXzeLFy/WZ5EUozzN7MwzzzT3\r",
											"33+/1hrJkPGXX36pNaA2cYQCwBuOUJpZ3COUTz/91Nx3333mo48+Mm+99ZZp27at2Xzzzc0ee+wR\r",
											"nKacdNJJ2rL5PfHEE+b5558306ZNM+uuu27w2N9//20OO+yw4GeTf2NT+Pnnn4M5PDKv5o8//ggm\r",
											"64Xf9/jjjzdbbLGFtmw9fvrpJ/Puu++a+fPnm/XWWy+YSBfVQV7zJFBqUf4/jwShdYtr1KhR1v1l\r",
											"mzp1qraKtnDhQuv+sq1cuVJbNRoyZIi1bT5QgueXLFmS69atm7VN6XbnnXcG+8QxceJE62u0a9dO\r",
											"W1Q2btw462vYtr59++ZWrVqle7rF+bnmzJmTy4eptV3pJj9jErbXkG3KlCnaopytvWyfffaZtsjl\r",
											"xo4dm2toaChrc/vtt2uLbKrZQJE/TOkfK9wWLVqkraLZ9g23Xr16aatoo0ePtu6fP6LQFsVcgSLf\r",
											"77nnnrM+F7Xlj1j0laPJG8S2fxhklbRv3966f6Wt8E1m4/q5ttlmm+D5QYMGWZ+vtC1dujTYvxLb\r",
											"vrJNnjxZW5SztZft66+/Dp6P+l1FBVUW1GwfysiRI7VU7pFHHtGS27x587Rk98EHH2gpmhz621x1\r",
											"1VVaiufjjz9ONeIis1xPPPFErTUNObX4/ffftZZMz549TT5UtBZf165dzbnnnpv66t8tt9zSfP75\r",
											"51pLLuraJ5fOnTtX9bvKgprulO3UqZOWiuU/6bXkdsMNN2jJ7d5779WSm1xYZ3PkkUdqKR7pC0jr\r",
											"ySefdP4c1ZIJXtXaaaedtBTfhx9+aO644w6tpSNh1pzT5w8//HAt1a+aDpQRI0ZoqVicN5dcaVrJ\r",
											"XXfdpSW71157TUvl9t13Xy1VJ3/or6VoRx99tJb8mTt3btAhbLPLLruYTz75JJjLIpt0KJ9yyin6\r",
											"bLmLL75YS/H89ddfWqpO9+7dtdT0XnrpJS3Vr5oOFDkkdoma6Rh3FqT0zv/7779aK+c63Ym6sjcO\r",
											"WZ8kfKPKcgfyVd68G2ywgbYo98MPPwTLIPjkOkI44YQTglO0nXfeWR9ZM0o1depU8/jjj+sjxW6+\r",
											"+WYtpSMjODLpLPy9hFulo0j5+916661aa3m//fabljIq/0epafJPsG0jR47UFuUGDx5s3ce2jRkz\r",
											"Rvcql39DWfeZNWuWtijn6pQNt/nz52tLuy5dulj3k238+PHaqlyaTtmuXbta96mkf//+1v1so16u\r",
											"n6twu/rqq7W1W48ePaz7hpuLra1sUZ2ntvalW8eOHXPTpk3LLVu2TPdaY8WKFVrKppoPlGHDhjn/\r",
											"oC629q5haBmudLG1ly1KVKBccMEF2spt9erV1n1lk9d2SRMo8pxtn0oWLFiQO/nkk3PDhw//fxsw\r",
											"YEBu+fLl2qJRpUA577zztGVlnTt3tr6GbPnTU21VzNZWtmoCRUam6lXNB8qMGTOsf1TZbPMgZs6c\r",
											"aW378ssv5/KnFNbnbKZPn25te8ABB2gLu6hAiatTp07W/Xv27KktyqUJFNd8mIEDB2qL6lUKlCSi\r",
											"wnbEiBHaqpitrWxpA6V3797aqj7V/NT7qJ71Z555RkuNXKM7Bx98sMkfIWit2PXXX6+lRq7+k6Sj\r",
											"OyFZAjKu/Ke/lor5Hq6UxaxtHnvsMbP99ts3+cJMcUbiCq211lrOUSnX38u3eu+YrflAEa71UG2d\r",
											"ijJtu1Q4IiMrwttcccUVWmrkmh9x/vnnaymZ9u3ba6myP//8U0vF0sydiHLllVdqqZyst7rnnnsG\r",
											"31PWDZHp7/L7e/XVV7VF9S699FItxSer+dt89dVXWmo6+++/v5bqVyYCxTXJrTQ8bGEizj77bC2t\r",
											"GU2wKVx7VEZT5LoSG9cSj5VEjSa1FJk/kj+F05qb/D5efPHFYDKfHOlJyLiG9JuarNnbUuR6onqX\r",
											"iUAZNGiQlsrJQsMh22I6ovBitnPOOUdLxSZNmqQlY55++mktFUt7dNKayVwbmXWalPy+JFjSnmrI\r",
											"KVUaUfNXKq2tW60kp61ZlYlAkStxXUcWEydO1NKaeSWlDjnkEC2t4TrMl4V4Qq5JcVETu2qZnC7I\r",
											"yvhpyOUEjz76qNayrTUeZTa3TASKcN1fJfyEfOCBB4KvpS677DItNZLrSGzCWaOuI5Qsn0PLbTbk\r",
											"Evw0C1qfeuqp5vvvv9daPGnvahi18PQOO+ygJTSVzATKaaedpqVib775ZvD1xhtvDL6Wks7EUuPG\r",
											"jdNSsSlTpgRfbTNSba+TNdKn8sorr8hYbjCaMWbMmGB9ljjSXBMk3ycpua4JLSczgbLrrrtqqZwc\r",
											"WcjU9VKuYdEhQ4Zoqdjdd99tZsyYobViAwcO1FJ96N27d9AJ+9577wVvfDkCKTwtLCVHHHJ7zyTS\r",
											"nCq5+mxcp8TwKzOBIly97K5PR9vpTmivvfbSUjFXcAwfPlxL9WmTTTYJOr2jTlVsfVhRzjrrLC3F\r",
											"I4HlugOi65QYfmUqUAqHf+OImhTnei3bcLEszZg1cmojczrkTR1uclpZaSHt7bbbzjlCIxcUJiG3\r",
											"/khyUWFUH1ZTXI3ti1wAKjezz4JMBUqSkQjX6U4oyRFHFj/9ZPhVFqq65557/t/kauI4v2MZdbNJ\r",
											"E7yy7IGsYVvJsGHDgtMvm4aGBnPggQdqrfW45ZZbgqF1uS+S/IxyNblrflOtyFSgCNepSqlLLrlE\r",
											"S25xOxxbahJXU3J1MssqaFHLAciCRl988YXWiqVdgGjAgAHB0ZHcP6eULOYtSyeEHeY2EoStzbXX\r",
											"XhssU1FIljbYaKONtFabMhcocU974nzSxp36HXcRpFrj6sMYNWpUcL/kd955Rx9ZczmAzM/p1q2b\r",
											"PlJM7sa3zjrraC05CQXpp5GjH+mA32233YJPd1mTJWpavXzqN/USmWmMHj1aS+Vclw/UgswFimuE\r",
											"plCfPn20FM11EV6hLHf2Ra1YN2fOnOCeyfKmli28RYTLQw89pKXqyIiS9MVUWhM4tHLlSi21HpXm\r",
											"2MyePVtLtSdzgSIXqnXp0kVrdnFOd0KVwsc1/yUrbMPtSQ0ePDjxpL+NN9440QWTNjIRrzWqNL+m\r",
											"lmfcZi5QhBySR0myxECl8Em7XEGtkFOKpKMzhY499ljrjc0qkQ+FapZLXLFiRarFsZtDpRm7cY6M\r",
											"W6tMBkrUHyTpjM2owChcUzUu+Y9uk2RqeprXcK2VEuf7yoLU8qmadNq9XKLgukyhErkzoJDv67pg\r",
											"00aWUJB9NtxwQ30knTRhlmSfqIsmW9MauEll9lak0mEY3iYzJGP9O+64Y+JbQX733Xdm2bJlwQI+\r",
											"IXktuU1D0sNyufpZzqHl1CwkU/nlStW4w6ppXkNuiSnzHar5vkL+u8h/eFkPZvHixcHrhjp06BAs\r",
											"YC0hHPdCSbnd6tChQ7XWSEZuSue8yALYsmiWLOz0zTffBD+/nEpJh68cCR111FHaMj4ZkQpvaxqS\r",
											"W5r06tXLOfydZh8bGeaWiZLye5T9ZDRLFq+qZdzbGC0qSaCg9cvkKQ+AlkGgAPCGQAHgDYECwBsC\r",
											"BYA3BApalOuyfdetQtC6MWyMFiW335AL5WQOS0hCpnv37mby5Mn6CGoFgQLAG055AHhDoADwhkAB\r",
											"4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQ\r",
											"AHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8I\r",
											"FADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAb\r",
											"AgWAJ8b8B4TKHbcHdf0EAAAAAElFTkSuQmCC`\r",
											"\r",
											"pm.environment.set('attachment-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"to\":  \"{{test-sms}}\",\n   \"subject\":  \"Postman Message\",\n   \"body\":  \"{{$randomPhrase}}\",\n   \"callbackId\" : \"{{callback-name}}\",\n      \"callbackParameters\" : {\n      \"CustomID\" : \"890h0ef0fe09efw90e0jsdj0\",\n      \"senderAlias\": \"Alias\"\n   },\n   \"mms\":{\n   \t\t\"body\":\"\",\n   \t\t\"resources\" : {\n\t       \t\"attachment\" : [{\n               \t\"attachmentName\" : \"whispir.png\",\n               \t\"attachmentDesc\" : \"whispir.png\",\n               \t\"derefUri\" : \"{{attachment-resource}}\"\n           \t}]\n    \t}\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Message Scheduled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment')",
											"pm.environment.set('schedule', now().add(pm.environment.get('schedule-delay'), 'minutes').format('DD/MM/YYYY HH:mm'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-sms}}\",\r\n    \"subject\" : \"Postman Message {{$timestamp}}\",\r\n    \"body\":  \"{{$randomPhrase}}\",\r\n\t\"messageType\" : \"SCHEDULED\",\r\n\t\"scheduleType\" : \"ONCE\",\r\n\t\"scheduleDate\" : \"{{schedule}}\",\r\n    \"repetitionCount\" : \"0\",\r\n    \"repeatDays\" : \"0\",\r\n    \"repeatHrs\" : \"0\",\r\n    \"repeatMin\" : \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Message Scheduled Throttled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment')",
											"pm.environment.set('schedule', now().add(pm.environment.get('schedule-delay'), 'minutes').format('DD/MM/YYYY HH:mm'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-sms}}\",\r\n    \"subject\" : \"Postman Message {{$timestamp}}\",\r\n    \"body\":  \"{{$randomPhrase}}\",\r\n    \"features\": {\r\n        \"throttlingOptions\": {\r\n            \"throttling\" : \"enabled\",\r\n            \"configName\" : \"{{throttle-name}}\"\r\n        }\r\n    },\r\n\t\"messageType\" : \"SCHEDULED\",\r\n\t\"scheduleType\" : \"ONCE\",\r\n\t\"scheduleDate\" : \"{{schedule}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Message Scheduled Bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment')",
											"pm.environment.set('schedule', now().add(pm.environment.get('schedule-delay'), 'minutes').format('DD/MM/YYYY HH:mm'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.bulkmessage-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"resource\" : {\r\n        \"resourceId\" : \"{{resource-id}}\",\r\n        \"smsMappingField\" : \"mobile\",\r\n        \"emailMappingField\" : \"\",\r\n        \"voiceMappingField\" : \"\"\r\n    },\r\n    \"messageTemplateId\" : \"{{template-id}}\",\r\n\t\"messageType\" : \"SCHEDULED\",\r\n\t\"scheduleType\" : \"ONCE\",\r\n\t\"scheduleDate\" : \"{{schedule}}\",\r\n\t\"callbackId\" : \"{{callback-name}}\",\r\n\t\"label\":\"Campaign 123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Multipart Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the details later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"to\":\"{{test-sms}}\",\n\t\"subject\":\"Whispir Postman Collection\",\n\t\"body\":\"|This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message||This is a Whispir Postman Test Message|\"\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location reported in the Location response header.\nEach chunk of the message is 40 characters long for a theoretical maximum of 1600 characters (160x10)\nNB: The actual length varies according to the characters used and their representative bit count."
							},
							"response": []
						},
						{
							"name": "SMS Message XML Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+xml",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<ns2:message xmlns:ns2=\"http://schemas.api.whispir.com\">\r\n    <to>{{test-sms}}</to>\r\n    <messageTemplateName>{{template-name}}</messageTemplateName>\r\n    <messageattributes>\r\n        <attribute name=\"Test11\">ABC123</attribute>\r\n    </messageattributes>\r\n</ns2:message>"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "SMS Message JSON Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"to\": \"{{test-sms}}\",\n    \"subject\": \"Postman Message\",\n    \"body\": \"Hi there @@recipient_first_name@@ We'd like to make you aware of @@Test11@@\",\n    \"messageattributes\": {\n        \"attribute\": [\n            {\n                \"name\": \"Test11\",\n                \"value\": \"Test 11 Value\"\n            },\n            {\n                \"name\": \"Test22\",\n                \"value\": \"RED\"\n            },\n            {\n                \"name\": \"Test33\",\n                \"value\": \"en-en\"\n            },\n            {\n                \"name\": \"number\",\n                \"value\": \"QF12345\"\n            }\n        ]\n    },\n    \"callbackId\": \"{{callback-name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						}
					],
					"description": "These requests perform simple messaging tasks.  Ensure the credentials are set and tested in the parent collection.  Also ensure the _workspace-name_ has been set and _Workspace [id]_ request has completed successfully.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Email Messages",
					"item": [
						{
							"name": "Email Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-email}}\",\r\n    \"subject\" : \"{{$randomBs}}\",\r\n    \"email\" : {\r\n        \"body\" : \"{{$randomPhrase}}\",\r\n        \"footer\" : \"Postman Message\",\r\n        \"type\" : \"text/plain\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-email_"
							},
							"response": []
						},
						{
							"name": "Email Message Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\": \"{{test-email}}\",\r\n    \"subject\": \"{{$randomBs}}\",\r\n    \"email\": {\r\n        \"body\": \"{{$randomPhrase}}\",\r\n        \"footer\": \"Postman Message\",\r\n        \"type\": \"text/plain\"\r\n    },\r\n    \"features\": {\r\n        \"aliasOption\": {\r\n            \"aliasName\": \"Test\"\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-email_"
							},
							"response": []
						},
						{
							"name": "Email Message DLRs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-email}}\",\r\n    \"subject\" : \"Test Email\",\r\n    \"email\" : {\r\n        \"body\" : \"Whispir API email message\",\r\n        \"footer\" : \"Email signature goes here.\",\r\n        \"type\" : \"text/plain\"\r\n    },\r\n    \"dlr\": {\r\n    \t\"period\": \"\",\r\n    \t\"rule\": \"\",\r\n    \t\"type\": \"ReportDelivered\",\r\n    \t\"publishToWeb\": false,\r\n    \t\"expiryDay\": 0,\r\n    \t\"expiryHour\": 0,\r\n    \t\"expiryMin\": 0,\r\n    \t\"feedIds\": \"\",\r\n    \t\"bool\": false\r\n\t},\r\n    \"callbackId\" : \"{{callback-name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-email_"
							},
							"response": []
						},
						{
							"name": "Email Message Template DLR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-email}}\",\r\n\t\"messageTemplateId\": \"{{template-id}}\",\r\n    \"dlr\": {\r\n    \t\"period\": \"\",\r\n    \t\"rule\": \"\",\r\n    \t\"type\": \"ReportDelivered\",\r\n    \t\"publishToWeb\": false,\r\n    \t\"expiryDay\": 0,\r\n    \t\"expiryHour\": 0,\r\n    \t\"expiryMin\": 0,\r\n    \t\"feedIds\": \"\",\r\n    \t\"bool\": false\r\n\t},\r\n    \"callbackId\" : \"{{callback-name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-email_"
							},
							"response": []
						},
						{
							"name": "Email Message JSON Attributes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"to\" : \"{{test-email}}\",\n    \"subject\" : \"Test Email\",\n    \"email\" : {\n        \"body\" : \"Whispir API email message @@Test11@@ @@Test22@@\",\n        \"footer\" : \"This is the footer @@Test11@@ @@Test22@@\",\n        \"type\" : \"text/plain\"\n    },\n\t\"messageattributes\":{\n\t\t\"attribute\" : [\n\t\t\t{\n\t\t\t\t\"name\":\"Test11\",\n\t\t\t\t\"value\": \"Test 11 Value\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\":\"Test22\",\n\t\t\t\t\"value\": \"RED\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\":\"Test33\",\n\t\t\t\t\"value\": \"en-en\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\":\"number\",\n\t\t\t\t\"value\": \"QF12345\"\n\t\t\t}\n\t\t]\n\t},\n\t\"callbackId\":\"{{callback-name}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						},
						{
							"name": "Email Message with Attachment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = `iVBORw0KGgoAAAANSUhEUgAAARQAAACLCAYAAACgN2ZbAAAAAXNSR0IArs4c6QAAAARnQU1BAACx\r",
											"jwv8YQUAAAAJcEhZcwAAFiUAABYlAUlSJPAAAA3wSURBVHhe7d0HrBRFHMfxAX2iKCgqCGJFjajR\r",
											"ROyVgA1LLIhiAwQSFSxEjRp7AhFRQROxoEawoxI1tiBEgr0XBMVCM4KRWFHsoOf9l//6rszs7e7N\r",
											"K7f3/SSbN3M3e+/xHve73ZnZ2Ta5PAMAHrTVrwBQNQIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZA\r",
											"AeANgQLAGwIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwh\r",
											"UAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBv\r",
											"CBQA3hAoALwhUAB4Q6AA8IZAAeANgQLAGwIFgDcECgBvCBQA3hAoALwhUOrMddddZ/r27WtOP/10\r",
											"s3DhQn20vs2ePdscd9xxpk+fPubBBx/UR5FGm1yelpFhq1evNg0NDVprNGHCBHPRRRdprf4cccQR\r",
											"ZubMmVprtGrVKrP22mtrDXERKM1syZIl5ttvvy36z/rPP/+YzTbbzGy99db6iH9t2rTRUrm3337b\r",
											"7L333lqrHw8//LA544wztFasR48eZtGiRVpDXARKM+vfv7956qmntNZo/fXXN7/++qvW/Jo1a5Y5\r",
											"9NBDtVauX79+Zvr06VqrH1tttZVZunSp1sr98ssvpkOHDlpDHPShNLOOHTtqqdimm26qJf8WLFig\r",
											"Jbv3339fSyi0fPlyLSEuAqUO7L777lqyO+igg7RUX9q1a6clu2233VZLiItAqQP77LNPcErlctNN\r",
											"N2mpvtx2221aKrfffvvRKZsCgVInXP0zzz77bNABWY9khOfyyy/XWiM5MnnjjTe0hiQIlDoi/e8v\r",
											"vPCCGTp0qBk/fnxQP+aYY/TZ+jR27Fjz448/mmuuucZceOGF5vXXXzeLFy/WZ5EUozzN7MwzzzT3\r",
											"33+/1hrJkPGXX36pNaA2cYQCwBuOUJpZ3COUTz/91Nx3333mo48+Mm+99ZZp27at2Xzzzc0ee+wR\r",
											"nKacdNJJ2rL5PfHEE+b5558306ZNM+uuu27w2N9//20OO+yw4GeTf2NT+Pnnn4M5PDKv5o8//ggm\r",
											"64Xf9/jjjzdbbLGFtmw9fvrpJ/Puu++a+fPnm/XWWy+YSBfVQV7zJFBqUf4/jwShdYtr1KhR1v1l\r",
											"mzp1qraKtnDhQuv+sq1cuVJbNRoyZIi1bT5QgueXLFmS69atm7VN6XbnnXcG+8QxceJE62u0a9dO\r",
											"W1Q2btw462vYtr59++ZWrVqle7rF+bnmzJmTy4eptV3pJj9jErbXkG3KlCnaopytvWyfffaZtsjl\r",
											"xo4dm2toaChrc/vtt2uLbKrZQJE/TOkfK9wWLVqkraLZ9g23Xr16aatoo0ePtu6fP6LQFsVcgSLf\r",
											"77nnnrM+F7Xlj1j0laPJG8S2fxhklbRv3966f6Wt8E1m4/q5ttlmm+D5QYMGWZ+vtC1dujTYvxLb\r",
											"vrJNnjxZW5SztZft66+/Dp6P+l1FBVUW1GwfysiRI7VU7pFHHtGS27x587Rk98EHH2gpmhz621x1\r",
											"1VVaiufjjz9ONeIis1xPPPFErTUNObX4/ffftZZMz549TT5UtBZf165dzbnnnpv66t8tt9zSfP75\r",
											"51pLLuraJ5fOnTtX9bvKgprulO3UqZOWiuU/6bXkdsMNN2jJ7d5779WSm1xYZ3PkkUdqKR7pC0jr\r",
											"ySefdP4c1ZIJXtXaaaedtBTfhx9+aO644w6tpSNh1pzT5w8//HAt1a+aDpQRI0ZoqVicN5dcaVrJ\r",
											"XXfdpSW71157TUvl9t13Xy1VJ3/or6VoRx99tJb8mTt3btAhbLPLLruYTz75JJjLIpt0KJ9yyin6\r",
											"bLmLL75YS/H89ddfWqpO9+7dtdT0XnrpJS3Vr5oOFDkkdoma6Rh3FqT0zv/7779aK+c63Ym6sjcO\r",
											"WZ8kfKPKcgfyVd68G2ywgbYo98MPPwTLIPjkOkI44YQTglO0nXfeWR9ZM0o1depU8/jjj+sjxW6+\r",
											"+WYtpSMjODLpLPy9hFulo0j5+916661aa3m//fabljIq/0epafJPsG0jR47UFuUGDx5s3ce2jRkz\r",
											"Rvcql39DWfeZNWuWtijn6pQNt/nz52tLuy5dulj3k238+PHaqlyaTtmuXbta96mkf//+1v1so16u\r",
											"n6twu/rqq7W1W48ePaz7hpuLra1sUZ2ntvalW8eOHXPTpk3LLVu2TPdaY8WKFVrKppoPlGHDhjn/\r",
											"oC629q5haBmudLG1ly1KVKBccMEF2spt9erV1n1lk9d2SRMo8pxtn0oWLFiQO/nkk3PDhw//fxsw\r",
											"YEBu+fLl2qJRpUA577zztGVlnTt3tr6GbPnTU21VzNZWtmoCRUam6lXNB8qMGTOsf1TZbPMgZs6c\r",
											"aW378ssv5/KnFNbnbKZPn25te8ABB2gLu6hAiatTp07W/Xv27KktyqUJFNd8mIEDB2qL6lUKlCSi\r",
											"wnbEiBHaqpitrWxpA6V3797aqj7V/NT7qJ71Z555RkuNXKM7Bx98sMkfIWit2PXXX6+lRq7+k6Sj\r",
											"OyFZAjKu/Ke/lor5Hq6UxaxtHnvsMbP99ts3+cJMcUbiCq211lrOUSnX38u3eu+YrflAEa71UG2d\r",
											"ijJtu1Q4IiMrwttcccUVWmrkmh9x/vnnaymZ9u3ba6myP//8U0vF0sydiHLllVdqqZyst7rnnnsG\r",
											"31PWDZHp7/L7e/XVV7VF9S699FItxSer+dt89dVXWmo6+++/v5bqVyYCxTXJrTQ8bGEizj77bC2t\r",
											"GU2wKVx7VEZT5LoSG9cSj5VEjSa1FJk/kj+F05qb/D5efPHFYDKfHOlJyLiG9JuarNnbUuR6onqX\r",
											"iUAZNGiQlsrJQsMh22I6ovBitnPOOUdLxSZNmqQlY55++mktFUt7dNKayVwbmXWalPy+JFjSnmrI\r",
											"KVUaUfNXKq2tW60kp61ZlYlAkStxXUcWEydO1NKaeSWlDjnkEC2t4TrMl4V4Qq5JcVETu2qZnC7I\r",
											"yvhpyOUEjz76qNayrTUeZTa3TASKcN1fJfyEfOCBB4KvpS677DItNZLrSGzCWaOuI5Qsn0PLbTbk\r",
											"Evw0C1qfeuqp5vvvv9daPGnvahi18PQOO+ygJTSVzATKaaedpqVib775ZvD1xhtvDL6Wks7EUuPG\r",
											"jdNSsSlTpgRfbTNSba+TNdKn8sorr8hYbjCaMWbMmGB9ljjSXBMk3ycpua4JLSczgbLrrrtqqZwc\r",
											"WcjU9VKuYdEhQ4Zoqdjdd99tZsyYobViAwcO1FJ96N27d9AJ+9577wVvfDkCKTwtLCVHHHJ7zyTS\r",
											"nCq5+mxcp8TwKzOBIly97K5PR9vpTmivvfbSUjFXcAwfPlxL9WmTTTYJOr2jTlVsfVhRzjrrLC3F\r",
											"I4HlugOi65QYfmUqUAqHf+OImhTnei3bcLEszZg1cmojczrkTR1uclpZaSHt7bbbzjlCIxcUJiG3\r",
											"/khyUWFUH1ZTXI3ti1wAKjezz4JMBUqSkQjX6U4oyRFHFj/9ZPhVFqq65557/t/kauI4v2MZdbNJ\r",
											"E7yy7IGsYVvJsGHDgtMvm4aGBnPggQdqrfW45ZZbgqF1uS+S/IxyNblrflOtyFSgCNepSqlLLrlE\r",
											"S25xOxxbahJXU3J1MssqaFHLAciCRl988YXWiqVdgGjAgAHB0ZHcP6eULOYtSyeEHeY2EoStzbXX\r",
											"XhssU1FIljbYaKONtFabMhcocU974nzSxp36HXcRpFrj6sMYNWpUcL/kd955Rx9ZczmAzM/p1q2b\r",
											"PlJM7sa3zjrraC05CQXpp5GjH+mA32233YJPd1mTJWpavXzqN/USmWmMHj1aS+Vclw/UgswFimuE\r",
											"plCfPn20FM11EV6hLHf2Ra1YN2fOnOCeyfKmli28RYTLQw89pKXqyIiS9MVUWhM4tHLlSi21HpXm\r",
											"2MyePVtLtSdzgSIXqnXp0kVrdnFOd0KVwsc1/yUrbMPtSQ0ePDjxpL+NN9440QWTNjIRrzWqNL+m\r",
											"lmfcZi5QhBySR0myxECl8Em7XEGtkFOKpKMzhY499ljrjc0qkQ+FapZLXLFiRarFsZtDpRm7cY6M\r",
											"W6tMBkrUHyTpjM2owChcUzUu+Y9uk2RqeprXcK2VEuf7yoLU8qmadNq9XKLgukyhErkzoJDv67pg\r",
											"00aWUJB9NtxwQ30knTRhlmSfqIsmW9MauEll9lak0mEY3iYzJGP9O+64Y+JbQX733Xdm2bJlwQI+\r",
											"IXktuU1D0sNyufpZzqHl1CwkU/nlStW4w6ppXkNuiSnzHar5vkL+u8h/eFkPZvHixcHrhjp06BAs\r",
											"YC0hHPdCSbnd6tChQ7XWSEZuSue8yALYsmiWLOz0zTffBD+/nEpJh68cCR111FHaMj4ZkQpvaxqS\r",
											"W5r06tXLOfydZh8bGeaWiZLye5T9ZDRLFq+qZdzbGC0qSaCg9cvkKQ+AlkGgAPCGQAHgDYECwBsC\r",
											"BYA3BApalOuyfdetQtC6MWyMFiW335AL5WQOS0hCpnv37mby5Mn6CGoFgQLAG055AHhDoADwhkAB\r",
											"4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQ\r",
											"AHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8I\r",
											"FADeECgAvCFQAHhDoADwhkAB4A2BAsAbAgWANwQKAG8IFADeECgAvCFQAHhDoADwhkAB4A2BAsAb\r",
											"AgWAJ8b8B4TKHbcHdf0EAAAAAElFTkSuQmCC`\r",
											"\r",
											"pm.environment.set('attachment-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-email}}\",\r\n    \"subject\" : \"Test Email\",\r\n    \"email\" : {\r\n        \"body\" : \"Test Email with Attachment\",\r\n        \"footer\" : \"Email signature goes here.\",\r\n        \"type\" : \"text/plain\",\r\n        \"resources\" : {\r\n\t       \t\"attachment\" : [{\r\n               \t\"attachmentName\" : \"attachment.pdf\",\r\n               \t\"attachmentDesc\" : \"Whispir.pdf\",\r\n               \t\"derefUri\" : \"{{attachment-resource}}\"\r\n           \t}]\r\n    \t}\r\n    },\r\n    \"callbackId\" : \"{{callback-name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-email_"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Rich Content",
					"item": [
						{
							"name": "RC Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"to\" : \"{{test-sms}},{{test-email}}\",\n   \"subject\" : \"Test Rich Message\",\n   \"body\" : \"This is some content followed by the rich message link: @@web_link@@\",\n       \"email\": {\n        \"body\": \"This is some content followed by the rich message link: @@web_link@@\",\n        \"type\": \"text/plain\"\n    },\n   \"web\" : {\n      \"type\" : \"text/html\",\n      \"body\" : \"<!DOCTYPE html><html lang='en-US'><head> <meta property='og:image' content='https://www.whispir.com.au/assets/img/logo-white.svg' itemprop='https://www.whispir.com.au/assets/img/logo-white.svg'/><meta property='og:title' content='Insert title here' itemprop='Insert title here'/> <title>Clock</title></head><body> <div id='date-time'></div></body><style>body{background-color: green;}h1{color: red; margin-left: 40px;}</style><script>let d=new Date(); document.getElementById('date-time').innerHTML='<h1>Clock: ' + d + '</h1>'</script></html>\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
							},
							"response": []
						}
					]
				},
				{
					"name": "Voice Messages",
					"item": [
						{
							"name": "Voice Out TTS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Whispir API Key (Required)",
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-sms}}\",\r\n    \"subject\" : \"Test voice call with Text To Speech\",\r\n    \"voice\" : {\r\n        \"header\" : \"The following is an example of Whisper Voice Out Text To Speech\",\r\n        \"body\" : \"Welcome to Whisper Voice Out Text to Speech\",\r\n        \"footer\":\"This is the footer of the message, thanks for listening.\",\r\n        \"type\" : \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\"\r\n    },\r\n    \"callbackId\": \"{{callback-name}}\"\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Test voice call with pre-recorded segments"
							},
							"response": []
						},
						{
							"name": "Voice Out TTS Call Connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Whispir API Key (Required)",
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\" : \"{{test-sms}}\",\r\n    \"subject\" : \"Test voice call with Text To Speech\",\r\n    \"voice\" : {\r\n        \"header\" : \"The following is an example of Whisper Voice Out Text To Speech\",\r\n        \"body\" : \"Welcome to Whisper Voice Out Text to Speech\",\r\n        \"footer\":\"This is the footer of the message, thanks for listening.\",\r\n        \"type\" : \"ConfCall:{{test-sms}},ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\"\r\n    },\r\n    \"callbackId\": \"{{callback-name}}\"\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Test voice call with pre-recorded segments"
							},
							"response": []
						},
						{
							"name": "Voice Out Wav",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = ``\r",
											"\r",
											"pm.environment.set('voice-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Whispir API Key (Required)",
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/vnd.whispir.message-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\":\"{{test-sms}}\",\r\n    \"subject\":\"Prerecorded Voice Call\",\r\n    \"voice\": {\r\n        \"body\": \"Will be replaced by the voicebody.wav file\",\r\n        \"header\": \"Will be replaced by the voiceintro.wav file\",\r\n        \"type\": \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\",\r\n        \"resources\": {\r\n            \"attachment\": [\r\n                {\r\n                    \"attachmentName\": \"Introduction.wav\",\r\n                    \"attachmentDesc\": \"voiceintro.wav\",\r\n                    \"derefUri\": \"{{voice-resource}}\"\r\n                },\r\n                {\r\n                    \"attachmentName\": \"Body.wav\",\r\n                    \"attachmentDesc\": \"voicebody.wav\",\r\n                    \"derefUri\": \"{{voice-resource}}\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Test voice call with pre-recorded segments"
							},
							"response": []
						},
						{
							"name": "Voice TTS Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// save the message location so we can pull up the details\r",
											"pm.environment.set('template-location', postman.getResponseHeader('Location'))\r",
											"\r",
											"//\r",
											"var template = JSON.parse(responseBody)\r",
											"\r",
											"// pull out some values for use in other requests\r",
											"pm.environment.set('template-id', template.id)\r",
											"pm.environment.set('template-name', template.messageTemplateName)\r",
											"\r",
											"// set each of the accessible methods into a named variable\r",
											"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = ``\r",
											"\r",
											"pm.environment.set('voice-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"description": "Whispir API Key (Required)",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.whispir.template-v1+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.whispir.template-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messageTemplateName\": \"Voice Template {{$timestamp}}\",\r\n    \"messageTemplateDescription\": \"Template to provide a prerecorded voice template example\",\r\n    \"subject\": \"Test voice call with pre-recorded segments\",\r\n    \"body\": \"message\",\r\n    \"email\": {},\r\n    \"voice\": {\r\n        \"header\": \"Hi @@recipient_first_name@@\",\r\n        \"body\": \"@@Test11@@ @@Test22@@ @@Test33@@ @@number@@\",\r\n        \"type\" : \"Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{createTemplate}}",
									"host": [
										"{{createTemplate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Voice Out Wav Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"// save the message location so we can pull up the details\r",
											"pm.environment.set('template-location', postman.getResponseHeader('Location'))\r",
											"\r",
											"//\r",
											"var template = JSON.parse(responseBody)\r",
											"\r",
											"// pull out some values for use in other requests\r",
											"pm.environment.set('template-id', template.id)\r",
											"pm.environment.set('template-name', template.messageTemplateName)\r",
											"\r",
											"// set each of the accessible methods into a named variable\r",
											"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = ``\r",
											"\r",
											"pm.environment.set('voice-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"description": "Whispir API Key (Required)",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.whispir.template-v1+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.whispir.template-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messageTemplateName\": \"Voice Template {{$timestamp}}\",\r\n    \"messageTemplateDescription\": \"Template to provide a prerecorded voice template example\",\r\n    \"subject\": \"Test voice call with pre-recorded segments\",\r\n    \"body\": \"message\",\r\n    \"email\": {},\r\n    \"voice\": {\r\n        \"header\": \"Will be replaced by the voiceintro.wav file\",\r\n        \"body\": \"Will be replaced by the voicebody.wav file\",\r\n        \"type\": \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\",\r\n        \"resources\": {\r\n            \"attachment\": [\r\n                {\r\n                    \"attachmentName\": \"Introduction.wav\",\r\n                    \"attachmentDesc\": \"voiceintro.wav\",\r\n                    \"derefUri\": \"{{voice-resource}}\"\r\n                },\r\n                {\r\n                    \"attachmentName\": \"Body.wav\",\r\n                    \"attachmentDesc\": \"voicebody.wav\",\r\n                    \"derefUri\": \"{{voice-resource}}\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{createTemplate}}",
									"host": [
										"{{createTemplate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Voice Out Wav Bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// whispir logo.png\r",
											"var base64 = ``\r",
											"\r",
											"pm.environment.set('voice-resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "Whispir API Key (Required)",
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "content-type",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n    \"messageTemplateId\": \"{{template-id}}\",\r\n    \"subject\":\"Prerecoded Bulk Voice Out\",\r\n    \"resource\": {\r\n        \"resourceId\": \"{{resource-id}}\",\r\n        \"smsMappingField\": \"mobile\",\r\n        \"emailMappingField\": \"email\",\r\n        \"voiceMappingField\": \"mobile\"\r\n    },\r\n    \"voice\" : {\r\n        \"body\" : \"Will be replaced by the voicebody.wav file\",\r\n        \"header\" : \"Will be replaced by the voiceintro.wav file\",\r\n        \"type\" : \"ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:,Pin:\",\r\n        \"resources\" : {\r\n            \"attachment\" : [{\r\n                \"attachmentName\" : \"Introduction.wav\",\r\n                \"attachmentDesc\" : \"voiceintro.wav\",\r\n                \"derefUri\" : \"{{voice-resource}}\"\r\n            },{\r\n                \"attachmentName\" : \"Body.wav\",\r\n                \"attachmentDesc\" : \"voicebody.wav\",\r\n                \"derefUri\" : \"{{voice-resource}}\"\r\n            }]\r\n        }\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Test voice call with pre-recorded segments"
							},
							"response": []
						}
					]
				},
				{
					"name": "Bulk Messaging",
					"item": [
						{
							"name": "1. Create Resource CSV",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `firstName,mobile,email,customParam,New Param\r",
											"Jason,${pm.environment.get('test-sms')},${pm.environment.get('test-email')},12345,67890`\r",
											"pm.environment.set('resource', Buffer.from(rawStr).toString('base64'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
											"",
											"//",
											"resource = JSON.parse(responseBody)",
											"",
											"// set each of the accessible methods into a named variable",
											"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"text/csv\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  "
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Create Resource JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
											"",
											"//",
											"resource = JSON.parse(responseBody)",
											"",
											"// set each of the accessible methods into a named variable",
											"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `[{\"Content\":\"Jason\",\"Mobile\":\"+${pm.environment.get('test-sms')}\",\"Sent\":false,\"SentAt\":\"2020-04-14T09:00:00+10:00\",\"Metadata\":{\"MessageId\":20910948,\"Uid\":1,\"CostCode\":\"123455\"}}]`\r",
											"pm.environment.set('resource', Buffer.from(rawStr).toString('base64'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"application/json\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  "
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('template-id', JSON.parse(responseBody).id)",
											"pm.environment.set('template-name', JSON.parse(responseBody).messageTemplateName)",
											"",
											"template = JSON.parse(responseBody)",
											"",
											"// set each of the accessible methods into a named variable",
											"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.template-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.template-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"messageTemplateName\": \"Template {{$timestamp}}\", \r\n   \"messageTemplateDescription\": \"Template to provide an example of Bulk Templates\",\r\n   \"subject\" : \"Postman Template\",\r\n   \"body\" : \"Hi @@firstName@@, {{$randomBs}}\",\r\n   \"features\": {\r\n        \"throttlingOptions\": {\r\n                \"throttling\" : \"enabled\",\r\n                \"configName\" : \"ThrottleName\"\r\n        }\r\n\t},\r\n   \"email\" : {\r\n       \"body\" : \"Hi @@firstName@@, {{$randomBs}}\",\r\n        \"footer\" : \"{{$randomPhrase}}\",\r\n        \"type\" : \"text/plain\"\r\n    },\r\n  \"web\": {\r\n    \"type\": \"text/html\",\r\n    \"body\": \"<div class='content'>Hi @@firstName@@, {{$randomBs}}</div>\"\r\n  },\r\n    \"social\" : {\r\n        \"social\" : [{\r\n            \"id\" : \"social\",\r\n            \"body\" : \"Hi @@firstName@@, {{$randomBs}}\"\r\n        }, {\r\n            \"id\" : \"socialType\",\r\n            \"body\" : \"text/plain\"\r\n        }, {\r\n            \"id\" : \"social_long\",\r\n            \"body\" : \"Hi @@firstName@@, {{$randomBs}}\"\r\n        }]\r\n    },\r\n    \"push\" : {\r\n        \"content\" : [{\r\n            \"id\" : \"social\",\r\n            \"body\" : \"Hi @@firstName@@, {{$randomBs}}\"\r\n        }, {\r\n            \"id\" : \"socialType\",\r\n            \"body\" : \"text/plain\"\r\n        }, {\r\n            \"id\" : \"social_long\",\r\n            \"body\" : \"Hi @@firstName@@, {{$randomBs}}\"\r\n        }]\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{createTemplate}}",
									"host": [
										"{{createTemplate}}"
									]
								},
								"description": "Create a simple text template with parameters to be used in the bulk message test\n* firstName\n* lastName\n* next_shift\n* location\n* day\n* start_time\n\nThe template name is unique, so a timestamp is added to the template name to prevent the request from failing."
							},
							"response": [
								{
									"name": "2. Create Template",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "x-api-key",
												"type": "text",
												"value": "{{x-api-key}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.whispir.template-v1+json"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.whispir.template-v1+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n   \"messageTemplateName\": \"SMS Email Template\", \r\n   \"messageTemplateDescription\": \"Template to provide an example on whispir.io\",\r\n   \"subject\" : \"Test SMS/Email Message\",\r\n   \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n   \"email\" : {\r\n       \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n        \"footer\" : \"Email signature goes here.\",\r\n        \"type\" : \"text/plain\"\r\n    },\r\n   \"voice\" : {},\r\n   \"web\" : {}\r\n}"
										},
										"url": {
											"raw": "{{createTemplate}}",
											"host": [
												"{{createTemplate}}"
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Mon, 19 Aug 2019 05:20:14 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/vnd.whispir.template-v1+json"
										},
										{
											"key": "Content-Length",
											"value": "409"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-amzn-RequestId",
											"value": "06180187-c241-11e9-9fa8-ed80868004fd"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "x-amzn-Remapped-Connection",
											"value": "keep-alive"
										},
										{
											"key": "x-amz-apigw-id",
											"value": "epyuOF9NSwMFkeg="
										},
										{
											"key": "Cache-Control",
											"value": "max-age=0"
										},
										{
											"key": "x-amzn-Remapped-Server",
											"value": "Apache"
										},
										{
											"key": "Expires",
											"value": "Mon, 19 Aug 2019 05:20:14 GMT"
										},
										{
											"key": "x-amzn-Remapped-Date",
											"value": "Mon, 19 Aug 2019 05:20:14 GMT"
										}
									],
									"cookie": [],
									"body": "{\n    \"errorSummary\": \"Your request did not contain all of the information required to perform this method. Please check your request for the required fields to be passed in and try again. Alternatively, contact your administrator or support@whispir.com for more information\",\n    \"errorText\": \"A Template name already exists in the current Workspace, please select another name and try again\",\n    \"link\": []\n}"
								}
							]
						},
						{
							"name": "3. Register Callback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.environment.set('callback-name', JSON.parse(responseBody).name)",
											"pm.environment.set('callback-id', JSON.parse(responseBody).id)",
											"// save the callback location so we can pull up the summary view later",
											"pm.environment.set('callback-location', postman.getResponseHeader('Location'))",
											"",
											"callback = JSON.parse(responseBody)",
											"",
											"// set each of the accessible methods into a named variable",
											"callback.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.whispir.api-callback-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/vnd.whispir.api-callback-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"Postman Callback {{$timestamp}}\",\r\n  \"url\" : \"{{callback-url}}\",\r\n  \"auth\" : {\r\n    \"type\" : \"querystring\",\r\n    \"key\" : \"MY_AUTH_KEY\"\r\n  },\r\n  \"contentType\" : \"json\",\r\n  \"removeHTML\" : \"disabled\",\r\n  \"retriesEnabled\" : \"true\",\r\n  \"email\" : \"me@example.com\",\r\n  \"callbacks\" : {\r\n    \"reply\" : \"enabled\",\r\n    \"undeliverable\" : \"enabled\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{base-url}}/callbacks",
									"host": [
										"{{base-url}}"
									],
									"path": [
										"callbacks"
									]
								},
								"description": "Call a nominated URL with payload on receipt of return message.  For testing you should use an open webhook (webhook.site) which requires minimal configuration and accepts all incoming connections before attempting to model a specific configuration in the callback parameters below."
							},
							"response": []
						},
						{
							"name": "4. Send Bulk Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Body matches string - accepted for processing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Your request has been accepted for processing\");",
											"})",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.bulkmessage-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messageTemplateId\": \"{{template-id}}\",\r\n    \"resource\": {\r\n        \"resourceId\": \"{{resource-id}}\",\r\n        \"smsMappingField\": \"mobile\",\r\n        \"emailMappingField\": \"email\",\r\n        \"options\": {\r\n            \"resolveRecipients\": \"true\"\r\n        }\r\n    },\r\n    \"callbackParameters\": {\r\n        \"CustomID\": \"12345\"\r\n    },\r\n    \"callbackId\": \"{{callback-name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send bulk messages using a recipient resource and template.  Both _resource-id_ and _template-id_ must have been populated from previous calls to _Create Resource_ and _Create Template_ respectively.\n\n    \"messageTemplateId\" : \"{{template-id}}\","
							},
							"response": []
						},
						{
							"name": "5. Send Bulk Scheduled Template Messages",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment')",
											"// compute the schedule using schedule-delay environment variable and set into schedule for the body of the request",
											"pm.environment.set('schedule', now().add(pm.environment.get('schedule-delay'), 'minutes').format('DD/MM/YYYY HH:mm'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"var message = JSON.parse(responseBody)",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"resource\" : {\r\n        \"resourceId\" : \"{{resource-id}}\",\r\n        \"smsMappingField\" : \"\",\r\n        \"emailMappingField\" : \"email\",\r\n        \"voiceMappingField\" : \"\"\r\n    },\r\n    \"options\" : {\r\n        \"resolveRecipients\" : \"false\"\r\n    },\r\n    \"messageTemplateName\" : \"{{template-name}}\",\r\n\t\"messageType\" : \"SCHEDULED\",\r\n\t\"scheduleType\" : \"ONCE\",\r\n\t\"scheduleDate\" : \"{{schedule}}\",\r\n\t\"callbackId\" : \"{{callback-name}}\"\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a scheduled message to:\n* recipient in _resource-id_ using \n* template _template-name_ with \n* schedule now() + _schedule-delay_ in the \n* workspace _workspace-name_."
							},
							"response": []
						},
						{
							"name": "5. Send Bulk Repeat Template Messages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var now = require('moment')",
											"// compute the schedule using schedule-delay environment variable and set into schedule for the body of the request",
											"pm.environment.set('schedule', now().add(pm.environment.get('schedule-delay'), 'minutes').format('DD/MM/YYYY HH:mm'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"resource\" :{\r\n\t \"resourceId\" : \"{{resource-id}}\",\r\n\t \"smsMappingField\" : \"mobile\",\r\n\t \"emailMappingField\" : \"email\",\r\n\t \"voiceMappingField\" : \"\"\r\n\t},\r\n    \"options\" : {\r\n        \"resolveRecipients\" : \"false\"\r\n    },\r\n\t\"subject\": \"Testing\",\r\n\t\"body\": \"Hello @@firstname@@ @@lastname@@\",\r\n\t\"messageType\" : \"SCHEDULED\",\r\n\t\"scheduleType\" : \"REPEAT\",\r\n\t\"scheduleDate\" : \"{{schedule}}\",\r\n\t\"repetitionCount\" : \"10\",\r\n    \"repeatDays\" : \"0\",\r\n    \"repeatHrs\" : \"1\",\r\n    \"repeatMin\" : \"0\"\r\n}"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send a message attributed to the _workspace-name_ workspace.  The reciepient is identified in _test-sms_"
							},
							"response": []
						}
					],
					"description": "These requests perform bulk messaging tasks.  Ensure the credentials are set and tested in the parent collection.  Also ensure the _workspace-name_ has been set and _Workspace [id]_ request has completed successfully.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "WhatsApp",
					"item": [
						{
							"name": "Message",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{x-api-key}}",
										"description": "Whispir API Key (Required)",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/vnd.whispir.message-v1+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"to\": \"{{test-sms}}\",\r\n    \"subject\": \"Message Purpose\",\r\n    \"whatsapp\": {\r\n        \"type\": \"icebreaker\",\r\n        \"name\": \"debtquityupdate\",\r\n        \"content\": {\r\n            \"header\": {\r\n                \"image\": {\r\n                    \"link\": \"https://d1ccvuha0qk3lj.cloudfront.net/uploads/blog/Blog-image-QAF_2021.png\"\r\n                }\r\n            },\r\n            \"body\": [\r\n                {\r\n                    \"text\": \"{{$randomFirstName}}\"\r\n                },\r\n                {\r\n                    \"text\": \"{{$randomUrl}}\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Messsages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"1 Message or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.messages).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveMessage}}",
							"host": [
								"{{retrieveMessage}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "0",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "0",
									"disabled": true
								},
								{
									"key": "criteriaFromDate",
									"value": "22/01/2020",
									"description": "(format: dd/mm/yyyy)",
									"disabled": true
								},
								{
									"key": "criteriaFromTime",
									"value": "00:00",
									"description": "(format: hh:mm)",
									"disabled": true
								},
								{
									"key": "criteriaToDate",
									"value": "17/04/2020",
									"description": "(format: dd/mm/yyyy)",
									"disabled": true
								},
								{
									"key": "criteriaToTime",
									"value": "00:00",
									"description": "(format: hh:mm)",
									"disabled": true
								}
							]
						},
						"description": "Get the messages accessible in this workspace.  Use the _Workspace [id]_ request prior to this to ensure all the needed variables are set."
					},
					"response": []
				},
				{
					"name": "Messsages Shared",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"1 Message or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.messages).to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.message-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveMessage}}?viewType=shared",
							"host": [
								"{{retrieveMessage}}"
							],
							"query": [
								{
									"key": "viewType",
									"value": "shared"
								},
								{
									"key": "criteriaFromDate",
									"value": "17/01/2020",
									"disabled": true
								},
								{
									"key": "criteriaFromTime",
									"value": "00:00",
									"disabled": true
								},
								{
									"key": "criteriaToDate",
									"value": "23/01/2020",
									"disabled": true
								},
								{
									"key": "criteriaToTime",
									"value": "00:00",
									"disabled": true
								}
							]
						},
						"description": "Get the messages accessible in this workspace.  Use the _Workspace [id]_ request prior to this to ensure all the needed variables are set."
					},
					"response": []
				},
				{
					"name": "Send Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
									"});",
									"",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"to\": \"{{test-sms}}\",\r\n    \"subject\": \"Postman SMS/Email Message\",\r\n    \"body\": \"Hi @@recipient_first_name@@, @@Test11@@ @@Test22@@ @@Test33@@ @@number@@ @@web_link@@\",\r\n    \"email\": {\r\n        \"body\": \"Hi  @@recipient_first_name@@, @@Test11@@ @@Test22@@ @@Test33@@ @@number@@ @@web_link@@\",\r\n        \"footer\": \"{{$randomPhrase}}\",\r\n        \"type\": \"text/plain\"\r\n    },\r\n    \"web\": {\r\n        \"type\": \"text/html\",\r\n        \"body\": \"<div class='content'>Hi  @@recipient_first_name@@, @@Test11@@ @@Test22@@ @@Test33@@ @@number@@ </div>\"\r\n    },\r\n    \"voice\": {\r\n        \"header\": \"Hi @@recipient_first_name@@\",\r\n        \"body\": \"@@Test11@@ @@Test22@@ @@Test33@@ @@number@@\",\r\n        \"type\": \"Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:\"\r\n    },\r\n    \"social\": {\r\n        \"social\": [\r\n            {\r\n                \"id\": \"social\",\r\n                \"body\": \"Hi  @@recipient_first_name@@, @@Test11@@ @@Test22@@ @@Test33@@ @@number@@ \"\r\n            },\r\n            {\r\n                \"id\": \"socialType\",\r\n                \"body\": \"text/plain\"\r\n            },\r\n            {\r\n                \"id\": \"social_long\",\r\n                \"body\": \"Hi  @@recipient_first_name@@, @@Test11@@ @@Test22@@ @@Test33@@ @@number@@ \"\r\n            }\r\n        ]\r\n    },\r\n    \"push\": {\r\n        \"content\": [\r\n            {\r\n                \"id\": \"social\",\r\n                \"body\": \"This is the content of social message for Twitter\"\r\n            },\r\n            {\r\n                \"id\": \"socialType\",\r\n                \"body\": \"text/plain\"\r\n            },\r\n            {\r\n                \"id\": \"social_long\",\r\n                \"body\": \"This is the content of social message for Facebook\"\r\n            }\r\n        ]\r\n    },\r\n    \"messageattributes\": {\r\n        \"attribute\": [\r\n            {\r\n                \"name\": \"Test11\",\r\n                \"value\": \"Test 11 Value\"\r\n            },\r\n            {\r\n                \"name\": \"Test22\",\r\n                \"value\": \"RED\"\r\n            },\r\n            {\r\n                \"name\": \"Test33\",\r\n                \"value\": \"en-en\"\r\n            },\r\n            {\r\n                \"name\": \"number\",\r\n                \"value\": \"12345\"\r\n            }\r\n        ]\r\n    },\r\n    \"callbackId\": \"{{callback-name}}\",\r\n    \"callbackParameters\": {\r\n        \"CustomID\": \"MyCustomID\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{createMessage}}",
							"host": [
								"{{createMessage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
									"});",
									"",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"to\": \"{{test-sms}},{{test-email}}\",\r\n    \"messageTemplateId\": \"{{template-id}}\"\r\n}"
						},
						"url": {
							"raw": "{{createMessage}}",
							"host": [
								"{{createMessage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Message DL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
									"});",
									"",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.whispir.message-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n   \"to\":\"{{distList-mri}}\",\r\n   \"subject\" : \"Test SMS/Email Message\",\r\n   \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n   \"email\" : {\r\n       \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n        \"footer\" : \"Email signature goes here.\",\r\n        \"type\" : \"text/plain\"\r\n    },\r\n  \"web\": {\r\n    \"type\": \"text/html\",\r\n    \"body\": \"<div class='content'>This is the body of my rich message</div>\"\r\n  },\r\n    \"social\" : {\r\n        \"social\" : [{\r\n            \"id\" : \"social\",\r\n            \"body\" : \"This is the content of social message for Twitter\"\r\n        }, {\r\n            \"id\" : \"socialType\",\r\n            \"body\" : \"text/plain\"\r\n        }, {\r\n            \"id\" : \"social_long\",\r\n            \"body\" : \"This is the content of social message for Facebook\"\r\n        }]\r\n    },\r\n    \"push\" : {\r\n        \"content\" : [{\r\n            \"id\" : \"social\",\r\n            \"body\" : \"This is the content of social message for Twitter\"\r\n        }, {\r\n            \"id\" : \"socialType\",\r\n            \"body\" : \"text/plain\"\r\n        }, {\r\n            \"id\" : \"social_long\",\r\n            \"body\" : \"This is the content of social message for Facebook\"\r\n        }]\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{createMessage}}",
							"host": [
								"{{createMessage}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Push",
			"item": [
				{
					"name": "Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// set this workspace as JSON blob into the workspace variable",
									"let resp = JSON.parse(responseBody)",
									"let appName = pm.environment.get('app-name')",
									"let app = resp.applications.find( i => i.name === appName)",
									"pm.environment.set('app-id', app.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.app-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.au.whispir.com/apps",
							"protocol": "https",
							"host": [
								"api",
								"au",
								"whispir",
								"com"
							],
							"path": [
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact #1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var resp = JSON.parse(responseBody)",
									"pm.environment.set('contact-location', resp.contacts[0].link[0].uri)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveContacts}}?sortOrder=asc&sortFields=firstName,lastName&firstName={{firstname}}&lastName={{lastname}}&limit=20&offset=0",
							"host": [
								"{{retrieveContacts}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "sortFields",
									"value": "firstName,lastName"
								},
								{
									"key": "firstName",
									"value": "{{firstname}}"
								},
								{
									"key": "lastName",
									"value": "{{lastname}}"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Contact #2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.set('contact', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.contact-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{contact-location}}",
							"host": [
								"{{contact-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get App [id]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.app-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.au.whispir.com/apps/{{app-id}}",
							"protocol": "https",
							"host": [
								"api",
								"au",
								"whispir",
								"com"
							],
							"path": [
								"apps",
								"{{app-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"to\" : \"{{contact.mri}}\",\r\n    \"subject\" : \"Test push message\",\r\n    \"body\" : \"This is the body of my test push message\",\r\n    \"features\" : {\r\n        \"pushOptions\" : {\r\n            \"notifications\" : \"enabled\",\r\n            \"appId\" : \"{{app-id}}\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{createMessage}}",
							"host": [
								"{{createMessage}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources",
			"item": [
				{
					"name": "Public HTML",
					"item": [
						{
							"name": "Resource [HTML]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `<html><body><iframe src='https://whispir.com' /></body></html>`\r",
											"//var rawStr = `<html><head><meta http-equiv=\"refresh\" content=\"0;url=https://whispir.com/\" /></head><body></body></html>`\r",
											"\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"pm.environment.set('resource', base64)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
											"",
											"// set this workspace as JSON blob into the workspace variable",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('resource-location', postman.getResponseHeader('Location'))",
											"resource = JSON.parse(responseBody)",
											"// set each of the accessible methods into a named variable",
											"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.html\",\r\n  \"scope\" : \"public\",\r\n  \"mimeType\" : \"text/html\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								},
								"description": "Create a new resource in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables.  Also note that resources are not unique so each use of this request creates a new resource."
							},
							"response": []
						},
						{
							"name": "Resource Update [HTML]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"// 204 - no content"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `<html><head><meta http-equiv=\"refresh\" content=\"0;url=https://whispir.com/\" /></head><body></body></html>`\r",
											"//var rawStr = `<html><body><iframe src='https://whispir.com' /></body></html>`\r",
											"\r",
											"// base64 encode the resource\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"// use {{resource}} in the body to supply the encoded value\r",
											"pm.environment.set('resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.resource-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv {{$timestamp}}\",\r\n  \"scope\" : \"public\",\r\n  \"mimeType\" : \"text/html\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{updateResource}}",
									"host": [
										"{{updateResource}}"
									]
								},
								"description": "Update a resource previously POSTed in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields:\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables."
							},
							"response": []
						}
					]
				},
				{
					"name": "Private CSV",
					"item": [
						{
							"name": "Resource [CSV]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `FirstName,LastName,purpose,code,mobile, email\r",
											"First,Last,{{$randomPhrase}},{{$randomHexColor}}, ${pm.environment.get('test-sms')},${pm.environment.get('test-email')}`\r",
											"\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"pm.environment.set('resource', base64)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
											"",
											"// set this workspace as JSON blob into the workspace variable",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('resource-location', postman.getResponseHeader('Location'))",
											"resource = JSON.parse(responseBody)",
											"// set each of the accessible methods into a named variable",
											"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv {{$timestamp}}\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"text/csv\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								},
								"description": "Create a new resource in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables.  Also note that resources are not unique so each use of this request creates a new resource."
							},
							"response": []
						},
						{
							"name": "Resource [CSV]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"// 204 - no content"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `FirstName,LastName,Next Shift,Location,Day,Start Time,Run,mobile,email\r",
											"First,Last,Your last shift is at,Melbourne,Friday,6:00,AB, ${pm.environment.get('test-sms')},${pm.environment.get('test-email')}`\r",
											"\r",
											"// base64 encode the resource\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"// use {{resource}} in the body to supply the encoded value\r",
											"pm.environment.set('resource', base64)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.whispir.resource-v1+json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"text/csv\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{updateResource}}",
									"host": [
										"{{updateResource}}"
									]
								},
								"description": "Update a resource previously POSTed in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields:\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables."
							},
							"response": []
						}
					]
				},
				{
					"name": "Private JSON",
					"item": [
						{
							"name": "Resource [JSON]",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `[{\r",
											"    \"email\": \"${pm.environment.get('test-email')}\",\r",
											"    \"mobile\": \"${pm.environment.get('test-sms')}\",\r",
											"    \"event\": [{\r",
											"            \"name\": \"events\",\r",
											"            \"value\": [{\r",
											"                \"eventDate\": \"12 February 2019\",\r",
											"                \"rewardEarned\": \"15\"\r",
											"                },{\r",
											"                \"eventDate\": \"12 Jan 2019\",\r",
											"                \"rewardEarned\": \"10\"\r",
											"            }]\r",
											"        }]\r",
											"}]`\r",
											"\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"pm.environment.set('resource', base64)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)",
											"",
											"// set this workspace as JSON blob into the workspace variable",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('resource-location', postman.getResponseHeader('Location'))",
											"resource = JSON.parse(responseBody)",
											"",
											"// set each of the accessible methods into a named variable",
											"resource.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.csv {{$timestamp}}\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"application/json\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								},
								"description": "Create a new resource in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables.  Also note that resources are not unique so each use of this request creates a new resource."
							},
							"response": []
						}
					]
				},
				{
					"name": "Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"1 Resource or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.resources).to.to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.resource-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.resource-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveResources}}",
							"host": [
								"{{retrieveResources}}"
							]
						},
						"description": "This method is currently broken as the URI reported by Whispir conflicts with retrieving custom lists."
					},
					"response": []
				},
				{
					"name": "Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 204\", _ =>  {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", _ => {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.resource-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.resource-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{deleteResource}}",
							"host": [
								"{{deleteResource}}"
							]
						},
						"description": "Create a new resource in the current workspace.  Ensure you have executed _Workspace [id]_ prior to using this request.  This request builds a simple resource, base64 encoded with the following fields\n* FirstName\n* LastName\n* Next Shift\n* Location\n* Day\n* Start Time\n* Run\n* mobile\n* email\n\nNote that _mobile_ and _email_ are taken from the _test-sms_ and _test-email_ variables.  Also note that resources are not unique so each use of this request creates a new resource."
					},
					"response": []
				},
				{
					"name": "Resource [Location]",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.resource-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{resource-location}}",
							"host": [
								"{{resource-location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Responses",
			"item": [
				{
					"name": "Message Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// set this workspace as JSON blob into the workspace variable",
									"pm.environment.set('message', responseBody)",
									"message = JSON.parse(responseBody)",
									"// set each of the accessible methods into a named variable",
									"message.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{message-location}}",
							"host": [
								"{{message-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Response Summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.messageresponse-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{summaryResponses}}",
							"host": [
								"{{summaryResponses}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Response Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.messageresponse-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{detailedResponses}}",
							"host": [
								"{{detailedResponses}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Response Rules Summary",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.messageresponse-v1+json"
							}
						],
						"url": {
							"raw": "{{summaryResponsesWithResponseRule}}",
							"host": [
								"{{summaryResponsesWithResponseRule}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Response Rules Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.messageresponse-v1+json"
							}
						],
						"url": {
							"raw": "{{detailedResponsesWithResponseRule}}",
							"host": [
								"{{detailedResponsesWithResponseRule}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Scenarios",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "Accept: application/vnd.whispir.scenario-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveScenarios}}",
							"host": [
								"{{retrieveScenarios}}"
							]
						},
						"description": "Retrieve the colleciton of scenarios."
					},
					"response": []
				},
				{
					"name": "Scenario",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "Accept: application/vnd.whispir.scenario-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"Scenario {{$timestamp}}\",\r\n    \"description\" : \"{{$randomBs}}\",\r\n    \"allowedUsers\":\"EVERYONE\",\r\n    \"message\" : {\r\n        \"to\" : \"{{test-sms}}\",\r\n        \"subject\" : \"{{$randomBs}}\",\r\n        \"body\" : \"{{$randomPhrase}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{createScenario}}",
							"host": [
								"{{createScenario}}"
							]
						},
						"description": "Create a new scenario"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sources",
			"item": [
				{
					"name": "Sources",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.infohub-source-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveSource}}",
							"host": [
								"{{retrieveSource}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    return pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    return pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});\r",
									"\r",
									"//\r",
									"var source = JSON.parse(responseBody)\r",
									"\r",
									"// save the message location so we can pull up the details\r",
									"pm.environment.set('source-location', postman.getResponseHeader('Location'))\r",
									"\r",
									"// set each of the accessible methods into a named variable\r",
									"source.link.forEach( link => pm.environment.set(link.rel,link.uri))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.infohub-source-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.infohub-source-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Source {{$timestamp}}\",\r\n    \"description\": \"Postman Source\",\r\n    \"visibility\": \"\",\r\n    \"license\": \"\",\r\n    \"enabled\": false\r\n}\r\n"
						},
						"url": {
							"raw": "{{createSource}}",
							"host": [
								"{{createSource}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Document",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.infohub-document-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{retrieveDocument}}",
							"host": [
								"{{retrieveDocument}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Document",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}"
						},
						"url": {
							"raw": "{{createDocument}}",
							"host": [
								"{{createDocument}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fields",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.infohub-field-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{source-location}}/fields",
							"host": [
								"{{source-location}}"
							],
							"path": [
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.infohub-field-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.infohub-field-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Field {{$timestamp}}\",\r\n    \"path\":\"root\"\r\n}"
						},
						"url": {
							"raw": "{{source-location}}/fields",
							"host": [
								"{{source-location}}"
							],
							"path": [
								"fields"
							]
						}
					},
					"response": []
				}
			],
			"description": "The requests in this section are incomplete."
		},
		{
			"name": "Statuses",
			"item": [
				{
					"name": "Message Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// set this workspace as JSON blob into the workspace variable",
									"pm.environment.set('message', responseBody)",
									"message = JSON.parse(responseBody)",
									"// set each of the accessible methods into a named variable",
									"message.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.message-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{message-location}}",
							"host": [
								"{{message-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Detailed Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.messagestatus-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{detailedStatus}}",
							"host": [
								"{{detailedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Message Summary Status",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.messagestatus-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{summaryStatus}}",
							"host": [
								"{{summaryStatus}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Templates",
			"item": [
				{
					"name": "Conditional",
					"item": [
						{
							"name": "1. Create Resource Iterative Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set('resource-id', JSON.parse(responseBody).id)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rawStr = `[{\r",
											"    \"email\": \"${pm.environment.get('test-email')}\", \r",
											"    \"firstName\": \"Litmus\",\r",
											"    \"mobile\": \"${pm.environment.get('test-sms')}\", \r",
											"    \"accountNumber\": \"9000111222333\",\r",
											"    \"address\": \"123 Collins St, Melbourne, VIC 3000\",\r",
											"    \"metOneTarget\": \"true\",\r",
											"    \"metTwoTargets\": \"false\",\r",
											"    \"metThreeTargets\": \"false\",\r",
											"    \"showbar\": \"true\",\r",
											"    \"forecastUsageMessage\": \"Your forecast usage\",\r",
											"    \"actualUsageMessage\": \"Your actual usage\",\r",
											"    \"isSolar\": \"false\",\r",
											"    \"eventTime\": \"3pm - 5pm\",\r",
											"    \"totalRewardsEarned\": \"25\",\r",
											"    \"totalEventsCompleted\": \"2\",\r",
											"    \"event\": [\r",
											"        {\r",
											"            \"eventdate\": \"12 February 2019\",\r",
											"            \"rewardEarned\": \"15\"\r",
											"        },\r",
											"        {\r",
											"            \"eventdate\": \"12 January 2019\",\r",
											"            \"rewardEarned\": \"10\"\r",
											"        }\r",
											"    ]\r",
											"}]`\r",
											"\r",
											"var base64 =  Buffer.from(rawStr).toString('base64')\r",
											"pm.environment.set('resource', base64)\r",
											"\r",
											"\r",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.resource-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" : \"test.json\",\r\n  \"scope\" : \"private\",\r\n  \"mimeType\" : \"application/json\",\r\n  \"derefUri\" : \"{{resource}}\"\r\n}  "
								},
								"url": {
									"raw": "{{createResource}}",
									"host": [
										"{{createResource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Create Iterative Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// save the message location so we can pull up the details",
											"pm.environment.set('template-location', postman.getResponseHeader('Location'))",
											"",
											"//",
											"var template = JSON.parse(responseBody)",
											"",
											"// pull out some values for use in other requests",
											"pm.environment.set('template-id', template.id)",
											"pm.environment.set('template-name', template.name)",
											"",
											"// set each of the accessible methods into a named variable",
											"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.template-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.template-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n   \"messageTemplateName\": \"SMS/Email Template {{$timestamp}}\", \r\n   \"messageTemplateDescription\": \"Template to perform conditional\",\r\n   \"subject\" : \"Iter Test Message\",\r\n   \"body\" : \"Hi @@eventDate@@, \\n\\nDetails:\\n{{#each @@event@@}}\\n@@eventDate@@ - @@rewardEarned@@\\n{{/each}}\\n\\nSee @@web_link@@ for more.\",\r\n     \"email\": {\r\n    \"type\": \"text/html\",\r\n    \"body\": \"<center><table><tr><td width=\\\"600\\\">Hi @@eventDate@@, <br><br>Details:<br>{{#each @@event@@}}<br>@@eventdate@@ - @@rewardEarned@@<br>{{/each}}<br><br>See @@web_link@@ for more.</td></tr></table></center>\",\r\n    \"footer\": \"\"\r\n  },\r\n  \"web\": {\r\n    \"type\": \"text/html\",\r\n    \"body\": \"<script type=\\\"text/javascript\\\" src=\\\"//s3.amazonaws.com/content.whispir.com/public/template/lib/plugins/v1.6.js\\\" language=\\\"JavaScript1.2\\\"></script>\\n<div id=\\\"main-wrapper\\\"><!--design-->\\n<!--Version: 4.0.0.0_2018-04-06_1200-->\\n<!--link to 'Default' CSS styles set in the properties controller - so that if the Property controller has been deleted, property styles will default-->\\n<link rel=\\\"stylesheet\\\" href=\\\"https://cdn-au.whispir.com/create/default-component_level-styles.css\\\">\\n\\n<div class=\\\"Default\\\">\\n  <div class=\\\"wrap8321998 RemoveAfterSubmit\\\">\\n    <p>Hi @@eventDate@@, <br><br>Details:<br>{{#each @@event@@}}<br>@@eventdate@@ - @@rewardEarned@@<br>{{/each}}<br><br></p>\\n  </div>\\n</div>\\n<style>\\n  .wrap8321998 {\\n    max-width: 600px;\\n    margin: 0 auto;\\n    padding: 40px 20px 40px 20px;\\n    background: ;\\n  }\\n\\n\\n  /*Custom style*/\\n\\n  .Custom .wrap8321998 p {\\n    color: #151515;\\n    font-weight: normal;\\n    text-transform: none;\\n    font-family: 'Open Sans', sans-serif;\\n    text-align: left;\\n    font-size: 16px;\\n    margin: 10px 0px 10px 0px;\\n  }\\n</style>\\n<script>\\n  $(document).ready(function() {\\n    //hide the component set to be hidden when sent\\n    if ('Show' === 'Hide') {\\n      $('.wrap8321998').css('display', 'none');\\n    }\\n  });\\n</script></div><style>body {margin: 0;padding: 0;} #main-wrapper{max-width: 600px;margin: 0 auto;}</style>\"\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{createTemplate}}",
									"host": [
										"{{createTemplate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Send Bulk Message Iterative Template",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Body matches string - accepted for processing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Your request has been accepted for processing\");",
											"})",
											"",
											"pm.test(\"Body is correct\", function () {",
											"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
											"});",
											"",
											"// save the message location so we can pull up the summary view later",
											"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"type": "text",
										"value": "{{x-api-key}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.whispir.bulkmessage-v1+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"subject\" : \"Postman Bulk Message\",\r\n   \"resource\" : {\r\n        \"resourceId\" : \"{{resource-id}}\",\r\n        \"smsMappingField\" : \"mobile\",\r\n        \"emailMappingField\" : \"email\"\r\n    },\r\n\t\"messageTemplateId\" : \"{{template-id}}\",\r\n\t\"callbackId\" : \"{{callback-name}}\"\r\n}\r\n\r\n"
								},
								"url": {
									"raw": "{{createMessage}}",
									"host": [
										"{{createMessage}}"
									]
								},
								"description": "Send bulk messages using a recipient resource and template.  Both _resource-id_ and _template-id_ must have been populated from previous calls to _Create Resource_ and _Create Template_ respectively.\n\n    \"messageTemplateId\" : \"{{template-id}}\","
							},
							"response": []
						}
					]
				},
				{
					"name": "Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"1 Template or more returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.messagetemplates).to.to.have.lengthOf.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.template-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveTemplate}}?limit=20&offset=0",
							"host": [
								"{{retrieveTemplate}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Template [id]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"var template = JSON.parse(responseBody)",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('template-id', template.id)",
									"pm.environment.set('template-name', template.name)",
									"",
									"// set each of the accessible methods into a named variable",
									"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.whispir.template-v1+json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.template-v1+json"
							}
						],
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/templates/{{template-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"templates",
								"{{template-id}}"
							]
						},
						"description": "This method constructs the URL necessary to retrieve a template definition using the environment variable _template-id_"
					},
					"response": []
				},
				{
					"name": "Template [location]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"//",
									"var template = JSON.parse(responseBody)",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('template-id', template.id)",
									"pm.environment.set('template-name', template.messageTemplateName)",
									"",
									"// set each of the accessible methods into a named variable",
									"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{template-location}}",
							"host": [
								"{{template-location}}"
							]
						},
						"description": "This request uses the location returned by POST /templates to get the template details.  This simulates how a customer system would store the URL to a template resource anduse it to retrieve the template on demand."
					},
					"response": []
				},
				{
					"name": "Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('template-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var template = JSON.parse(responseBody)",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('template-id', template.id)",
									"pm.environment.set('template-name', template.messageTemplateName)",
									"",
									"// set each of the accessible methods into a named variable",
									"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"messageTemplateName\": \"Multichannel Template {{$timestamp}}\",\r\n    \"messageTemplateDescription\": \"Template to provide an example on whispir.io\",\r\n    \"subject\": \"Test SMS/Email Message\",\r\n    \"body\": \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ @@web_link@@\",\r\n    \"email\": {\r\n        \"body\": \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ @@web_link@@\",\r\n        \"footer\": \"Email signature goes here.\",\r\n        \"type\": \"text/plain\"\r\n    },\r\n    \"web\": {\r\n        \"type\": \"text/html\",\r\n        \"body\": \"<html><body><div class=\\\"content\\\">This is the body of my rich message</div></body></html>\"\r\n    },\r\n    \"social\": {\r\n        \"social\": [\r\n            {\r\n                \"id\": \"social\",\r\n                \"body\": \"This is the content of social message for Twitter\"\r\n            },\r\n            {\r\n                \"id\": \"socialType\",\r\n                \"body\": \"text/plain\"\r\n            },\r\n            {\r\n                \"id\": \"social_long\",\r\n                \"body\": \"This is the content of social message for Facebook\"\r\n            }\r\n        ]\r\n    },\r\n    \"push\": {\r\n        \"content\": [\r\n            {\r\n                \"id\": \"social\",\r\n                \"body\": \"This is the content of social message for Twitter\"\r\n            },\r\n            {\r\n                \"id\": \"socialType\",\r\n                \"body\": \"text/plain\"\r\n            },\r\n            {\r\n                \"id\": \"social_long\",\r\n                \"body\": \"This is the content of social message for Facebook\"\r\n            }\r\n        ]\r\n    },\r\n    \"whatsapp\": {\r\n        \"type\": \"icebreaker\",\r\n        \"name\": \"remark_collections_latam2\",\r\n        \"content\": {\r\n            \"header\": {\r\n                \"image\": {\r\n                    \"link\": \"https://cdn-au.whispir.com/public/resources/1197f34a80fea2611c255ed0daf5432ea325.png\"\r\n                }\r\n            },\r\n            \"body\": [\r\n                {\r\n                    \"text\": \"Product Name\"\r\n                },\r\n                {\r\n                    \"text\": \"Coverage Type\"\r\n                },\r\n                {\r\n                    \"text\": \"Bank Account Name\"\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"label\": \"new label\",\r\n    \"features\": {\r\n        \"aliasOption\": {\r\n            \"aliasName\": \"Test Alias\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{createTemplate}}",
							"host": [
								"{{createTemplate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Template Email Open",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('template-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var template = JSON.parse(responseBody)",
									"",
									"// pull out some values for use in other requests",
									"pm.environment.set('template-id', template.id)",
									"pm.environment.set('template-name', template.messageTemplateName)",
									"",
									"// set each of the accessible methods into a named variable",
									"template.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"messageTemplateName\": \"Email Open Template {{$timestamp}}\",\r\n    \"messageTemplateDescription\": \"Template to provide an example of Email Open monitoring\",\r\n    \"subject\": \"Email Open Message\",\r\n    \"body\":\"Hi @@firstname@@\",\r\n    \"email\": {\r\n        \"body\": \"<body>Hi  @@firstname@@, <div style='display:none'><img src='@@web_link@@' /></div></body>\",\r\n        \"type\": \"text/html\"\r\n    },\r\n    \"web\": {\r\n        \"type\": \"text/html\",\r\n        \"body\": \"<div />\"\r\n    },\r\n\r\n    \"label\": \"new label\"\r\n}"
						},
						"url": {
							"raw": "{{createTemplate}}",
							"host": [
								"{{createTemplate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n   \"messageTemplateName\": \"{{template-name}}\", \r\n   \"messageTemplateDescription\": \"Updated Template to provide an example on developers.whispir.com {{$timestamp}}\",\r\n   \"subject\" : \"Test SMS/Email Message\",\r\n   \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n   \"email\" : {\r\n       \"body\" : \"Hi  @@firstname@@, @@next_shift@@  @@location@@  @@day@@  @@start_time@@ \",\r\n        \"footer\" : \"Email signature goes here.\",\r\n        \"type\" : \"text/plain\"\r\n    },\r\n    \"social\" : {\r\n        \"social\" : [{\r\n            \"id\" : \"social\",\r\n            \"body\" : \"This is the content of social message for Twitter\"\r\n        }, {\r\n            \"id\" : \"socialType\",\r\n            \"body\" : \"text/plain\"\r\n        }, {\r\n            \"id\" : \"social_long\",\r\n            \"body\" : \"This is the content of social message for Facebook\"\r\n        }]\r\n    },\r\n    \"features\": {\r\n        \"aliasOption\": {\r\n            \"aliasName\": \"Test Alias\"\r\n        }\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{updateTemplate}}",
							"host": [
								"{{updateTemplate}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.template-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{deleteTemplate}}",
							"host": [
								"{{deleteTemplate}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.user-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveUsers}}?sortOrder=asc&sortFields=firstName,lastName,workEmailAddress1&firstName=*&workEmailAddress1=",
							"host": [
								"{{retrieveUsers}}"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "asc"
								},
								{
									"key": "sortFields",
									"value": "firstName,lastName,workEmailAddress1"
								},
								{
									"key": "firstName",
									"value": "*"
								},
								{
									"key": "workEmailAddress1",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('user-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var contact = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"contact.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.user-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.user-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"userName\" : \"{{$randomUserName}}\",\r\n\t\"password\" : \"{{$randomPassword}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{test-email}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\"\r\n}"
						},
						"url": {
							"raw": "{{createUser}}",
							"host": [
								"{{createUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// save the message location so we can pull up the details",
									"pm.environment.set('user-location', postman.getResponseHeader('Location'))",
									"",
									"//",
									"var contact = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"contact.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.user-v1+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.user-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"userName\" : \"{{$randomUserName}}\",\r\n\t\"password\" : \"{{$randomPassword}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"timezone\": \"Australia/Melbourne\",\r\n    \"workEmailAddress1\": \"{{$randomExampleEmail}}\",\r\n    \"workMobilePhone1\": \"{{test-sms}}\",\r\n    \"workCountry\": \"Australia\"\r\n}"
						},
						"url": {
							"raw": "{{user-location}}",
							"host": [
								"{{user-location}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Events",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "accept",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							}
						],
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/events?eventType={{event-name}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"events"
							],
							"query": [
								{
									"key": "eventType",
									"value": "{{event-name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//squeeze the whitespace out of event",
									"pm.environment.set('event-name', pm.environment.get('event').replace(/\\s+/g, ''))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");",
									"});",
									"",
									"",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('event-location', postman.getResponseHeader('Location'))",
									"",
									"event = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"event.link.forEach( link => pm.environment.set(link.rel,link.uri))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							},
							{
								"key": "accept",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventLabel\": \"{{event-name}} - {{$timestamp}}\",\n  \"status\": \"Active\",\n  \"eventFormList\": [\n    {\n      \"formName\": \"{{event-name}}\",\n      \"eventFieldList\": [\n        {\n          \"name\": \"scheduleDate\",\n          \"value\": \"03/02/2020 16:00:00\"\n        },\n        {\n          \"name\": \"displayText\",\n          \"value\": \"{{$randomStreetAddress}}\"\n        },\n        {\n          \"name\": \"default\",\n          \"value\": \"{{$randomBs}}\"\n        },\n        {\n          \"name\": \"addressbook\",\n          \"value\": \"[{\\\"mri\\\":\\\"{{distList-mri}}\\\",\\\"name\\\":\\\"{{distList-name}}\\\"}]\"\n        },\n        {\n          \"name\": \"messageOptions\",\n          \"value\": \"Option1\"\n        },\n        {\n          \"name\": \"eventLocation\",\n          \"value\": \"{{$randomLatitude}},{{$randomLongitude}}\"\n        },\n        {\n\t\t\t\"name\":\"test11\",\n\t\t\t\"value\": \"Test 11 Value\"\n\t\t},\n\t\t{\n\t\t\t\"name\":\"test22\",\n\t\t\t\"value\": \"RED\"\n\t\t},\n\t\t{\n\t\t\t\"name\":\"test33\",\n\t\t\t\"value\": \"en-en\"\n\t\t},\n\t\t{\n\t\t\t\"name\":\"number\",\n\t\t\t\"value\": \"QF12345\"\n\t\t}\n      ]\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/events",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"events"
							]
						},
						"description": "Create a new event of _event-name_ with associated event fields and values."
					},
					"response": []
				},
				{
					"name": "Event [location]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"event = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"event.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.event-v1+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{event-location}}",
							"host": [
								"{{event-location}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"event = JSON.parse(responseBody)",
									"",
									"// set each of the accessible methods into a named variable",
									"event.link.forEach( link => pm.environment.set(link.rel,link.uri))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.message-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveEventMessages}}",
							"host": [
								"{{retrieveEventMessages}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Workflows",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"description": "Whispir API Key (Required)",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/vnd.whispir.workflow-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base-url}}/workflows",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workflows"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Workspaces",
			"item": [
				{
					"name": "Workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"var response = JSON.parse(responseBody)\r",
									"var workspaces = response.workspaces\r",
									"\r",
									"pm.test(\"1 Workspace or more returned\", _ => {\r",
									"    pm.expect(workspaces).to.have.lengthOf.above(0);\r",
									"});\r",
									"\r",
									"pm.environment.set('workspaces', JSON.stringify(workspaces))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.workspace-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveWorkspaces}}",
							"host": [
								"{{retrieveWorkspaces}}"
							]
						},
						"description": "Retrieves the accessible set of workspaces for the credentials provided.  \n\nUpon completion of the request, post event code saves the nominated workspace in _workspace-name_ as a JSON blob into \n* _workspace-id_\n* _workspace-location_ \n\nfor use by other requests in the collection."
					},
					"response": []
				},
				{
					"name": "Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    return pm.response.to.have.status(201)\r",
									"});\r",
									"//\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    return pm.expect(pm.response.responseTime).to.be.below(200)\r",
									"});\r",
									"//\r",
									"var workspace = JSON.parse(responseBody)\r",
									"// save the message location so we can pull up the details\r",
									"pm.environment.set('workspace-location', postman.getResponseHeader('Location'))\r",
									"// set each of the accessible methods into a named variable\r",
									"workspace.link.forEach( link => pm.environment.set(link.rel,link.uri))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.workspace-v1+json"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/vnd.whispir.workspace-v1+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"projectName\": \"Workspace {{$timestamp}}\",\r\n  \"projectNumber\": \"{{$randomInt}}\",\r\n  \"status\": \"A\",\r\n  \"billingcostcentre\": \"{{$guid}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{createWorkspaces}}",
							"host": [
								"{{createWorkspaces}}"
							]
						},
						"description": "Creates a new workspace.  Workspaces are unique by name.  The new Workspace is referred to by _workspace-location_ and each of the accessible methods are stored in environment variables."
					},
					"response": []
				}
			]
		},
		{
			"name": "Message Events",
			"item": [
				{
					"name": "Event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//squeeze the whitespace out of event",
									"pm.environment.set('event-name', pm.environment.get('event').replace(/\\s+/g, ''))",
									"",
									"now = new Date()",
									"pm.environment.set('date', `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}`)",
									"pm.environment.set('time', `${now.getHours()}:${now.getMinutes()}:${now.getSeconds() < 10 ? '0' + now.getSeconds() : now.getSeconds() }`)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");",
									"});",
									"",
									"",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('event-location', postman.getResponseHeader('Location'))",
									"",
									"event = JSON.parse(responseBody)",
									"",
									"pm.environment.set(\"event-id\", event.id)",
									"",
									"// set each of the accessible methods into a named variable",
									"event.link.forEach( link => pm.environment.set(link.rel,link.uri))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "content-type",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							},
							{
								"key": "accept",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventLabel\": \"{{event-name}} - {{$timestamp}}\",\n  \"status\": \"Active\",\n    \"eventFormList\": [\n        {\n            \"formName\": \"{{event-name}}\",\n            \"eventFieldList\": [\n                {\n                    \"name\": \"event\",\n                    \"value\": \"Init\"\n                },\n                {\n                    \"name\": \"created\",\n                    \"value\": \"{{date}} {{time}}\"\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base-url}}/workspaces/{{workspace-id}}/events",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"workspaces",
								"{{workspace-id}}",
								"events"
							]
						},
						"description": "Create a new event of _event-name_ with associated event fields and values."
					},
					"response": []
				},
				{
					"name": "Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"// test",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Your request has been accepted for processing\");",
									"});",
									"// save the message location so we can pull up the summary view later",
									"pm.environment.set('message-location', postman.getResponseHeader('Location'))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.whispir.message-v1+json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.message-v1+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"{{distList-mri}}\",\n    \"messageTemplateId\": \"A8F674EF8FD96063\",\n    \"eventId\": \"{{event-id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{createMessage}}",
							"host": [
								"{{createMessage}}"
							]
						},
						"description": "Send a message from the _workspace-name_ workspace.  The reciepient is identified in _test-sms_.  On successful completion, set the message location rteported in the Location response header.  This is used in the Responses requests."
					},
					"response": []
				},
				{
					"name": "Event [location]",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Whispir API Key (Required)",
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "accept",
								"type": "text",
								"value": "application/vnd.whispir.event-v1+json"
							}
						],
						"url": {
							"raw": "{{event-location}}",
							"host": [
								"{{event-location}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This is a custom collection based on an event definition in a specific workspace and environment.  The requests in this folder probably _won't_ work for you.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Testing",
			"item": []
		},
		{
			"name": "Utils",
			"item": [
				{
					"name": "Delete All Contacts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody)\r",
									"var contacts = response.contacts\r",
									"\r",
									"var base64 =  Buffer.from(pm.environment.get('whispir-username') + \":\" + pm.environment.get('whispir-password')).toString('base64')\r",
									"\r",
									"delContacts = []\r",
									"contacts.forEach( contact => {\r",
									"    pm.sendRequest({\r",
									"      url: contact.link[0].uri, //+'action=deleteAll'\r",
									"      method: 'DELETE',\r",
									"      header: [\r",
									"          'x-api-key:'+pm.environment.get('x-api-key'),\r",
									"          'Accept:application/vnd.whispir.contact-v1+json',\r",
									"          'Authorization: Basic ' + base64\r",
									"    ]\r",
									"    }, function (err, res) {\r",
									"      console.log(err ? err : \"Contact \" + contact.link[0].uri + \" DELETED\" );\r",
									"    });\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.contact-v1+json"
							}
						],
						"url": {
							"raw": "{{retrieveContacts}}?limit=0&offset=0",
							"host": [
								"{{retrieveContacts}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "0"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						},
						"description": "To use this request, ensure you have:\n_{{retrieveContacts}}_ from the desired workspace\n\nThis method will (GET) retrieve all the contacts in a given workspace and iteratively DELETE them all.  Add _action=deleteAll_ to remove the contact from all workspaces.\n\nYou can refine the set of contcats to delete by using selection parameters in the GET querystring\n\n* sortOrder:asc\n* sortFields:lastName,firstName,companyName\n* firstName: A\n* lastName: Z\n* companyName:Example Inc\n* fields:firstName,lastName,companyName"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Verify",
			"description": "Sends a code to the recipient to verify a transaction.",
			"item": [
				{
					"name": "Generate OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"current-verify-id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workspaceId\": \"{{workspace-id}}\",\n    \"channel\": \"sms\",\n    \"to\": \"+63123456789\",\n    \"codeLength\": 6,\n    \"expiresIn\": 18000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/otp/send-code",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"otp",
								"send-code"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify OTP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"to\": \"+63123456789\",\n    \"code\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/otp/{{current-verify-id}}/verify-code",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"otp",
								"{{current-verify-id}}",
								"verify-code"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1. Whispir.com",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"// set this workspace as JSON blob into the workspace variable",
							"pm.environment.set('whispir', responseBody)",
							"",
							"//",
							"whispir = JSON.parse(responseBody)",
							"",
							"// set each of the accessible methods into a named variable",
							"whispir.link.forEach( link => pm.environment.set(link.rel,link.uri))",
							"",
							"// visualizer",
							"var template = `",
							"    <table>",
							"        <tr>",
							"            <th>Method</th>",
							"            <th>URL</th>",
							"        </tr>",
							"",
							"        {{#each response}}",
							"            <tr>",
							"                <td>{{rel}}</td>",
							"                <td>{{uri}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`",
							"",
							"// Set visualizer",
							"pm.visualizer.set(template, {response: pm.response.json().link})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"type": "text",
						"value": "{{x-api-key}}"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.whispir.company-v1+json"
					}
				],
				"url": {
					"raw": "{{base-url}}",
					"host": [
						"{{base-url}}"
					]
				},
				"description": "Prior to executing this collection of requests, ensure the following variables are configured:\n* x-api-key - for header value\n* whispir-username - BASIC auth credential\n* whispir-password - BASIC auth credential\n\nThis request will return with a list of accessible methods at the global, default workspace.  These are not used in preference to the methods reported in the _workspace-name_ workspace retrieved in _Workspace [id]_"
			},
			"response": [
				{
					"name": "1. Whispir.com",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"type": "text",
								"value": "{{x-api-key}}"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.whispir.company-v1+json"
							}
						],
						"url": {
							"raw": "{{base-url}}",
							"host": [
								"{{base-url}}"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 05 Apr 2021 01:48:41 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/vnd.whispir.company-v1+json"
						},
						{
							"key": "Content-Length",
							"value": "303"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "fd312920-cd8e-45c2-9e81-c2594b08505a"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "x-amzn-Remapped-Connection",
							"value": "keep-alive"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "dSXjAGpDSwMFVZQ="
						},
						{
							"key": "Cache-Control",
							"value": "max-age=0"
						},
						{
							"key": "x-amzn-Remapped-Server",
							"value": "Apache"
						},
						{
							"key": "Expires",
							"value": "Mon, 05 Apr 2021 01:48:41 GMT"
						},
						{
							"key": "x-amzn-Remapped-Date",
							"value": "Mon, 05 Apr 2021 01:48:41 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"errorSummary\": \"You are attempting to access your account from IP address 202.125.18.109, 3.105.174.229 which has not been white listed within the Whispir platform. If you feel this is being shown in error, please contact your administrator\",\n    \"errorText\": \"Unauthorized\",\n    \"errorDetail\": \"\"\n}"
				}
			]
		},
		{
			"name": "2. Workspaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"var response = JSON.parse(responseBody)\r",
							"var workspaces = response.workspaces\r",
							"\r",
							"pm.test(\"1 Workspace or more returned\", _ => {\r",
							"    pm.expect(workspaces).to.have.lengthOf.above(0);\r",
							"});\r",
							"\r",
							"pm.environment.set('workspaces', JSON.stringify(workspaces))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"type": "text",
						"value": "{{x-api-key}}"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.whispir.workspace-v1+json"
					}
				],
				"url": {
					"raw": "{{retrieveWorkspaces}}",
					"host": [
						"{{retrieveWorkspaces}}"
					]
				},
				"description": "Retrieves the accessible set of workspaces for the credentials provided.  \n\nUpon completion of the request, post event code saves the nominated workspace in _workspace-name_ as a JSON blob into \n* _workspace-id_\n* _workspace-location_ \n\nfor use by other requests in the collection."
			},
			"response": []
		},
		{
			"name": "3. Workspace Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var workspaces = JSON.parse(pm.environment.get('workspaces'))\r",
							"\r",
							"// set the workspace id and workspace-location used in request URIs based on workspace-name variable\r",
							"if( pm.variables.has('workspace-name')){\r",
							"    var workspaceName = pm.environment.get('workspace-name')\r",
							"    workspace = workspaces.find( workspace => {\r",
							"        // console.log(`${workspace.projectName} == ${workspaceName}: ${workspace.projectName == workspaceName}`)\r",
							"        return workspace.projectName === pm.environment.get('workspace-name')\r",
							"    })\r",
							"    pm.environment.set('workspace-id', workspace.id)\r",
							"    pm.environment.set('workspace-location', workspace.link.find( link => { \r",
							"        return link.rel === 'self'\r",
							"    }).uri)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// set this workspace as JSON blob into the workspace variable",
							"pm.environment.set('workspace', responseBody)",
							"workspace = JSON.parse(responseBody)",
							"// set each of the accessible methods into a named variable",
							"workspace.link.forEach( link => pm.environment.set(link.rel,link.uri))",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"description": "Whispir API Key (Required)",
						"key": "x-api-key",
						"type": "text",
						"value": "{{x-api-key}}"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.whispir.workspace-v1+json"
					}
				],
				"url": {
					"raw": "{{workspace-location}}",
					"host": [
						"{{workspace-location}}"
					]
				},
				"description": "To use this request, set environment variable _workspace-name_ and use _GET Workspaces_ before this call. \nWhen this call completes successfully, each of the available API methods will be added to environment variables as _name_:_uri_ and used in subsequent requests."
			},
			"response": []
		},
		{
			"name": "New Workspace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201\", function() {\r",
							"    return pm.response.to.have.status(201)\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    return pm.expect(pm.response.responseTime).to.be.below(200)\r",
							"});\r",
							"\r",
							"//\r",
							"var workspace = JSON.parse(responseBody)\r",
							"\r",
							"// save the message location so we can pull up the details\r",
							"pm.environment.set('workspace-location', postman.getResponseHeader('Location'))\r",
							"\r",
							"// set each of the accessible methods into a named variable\r",
							"workspace.link.forEach( link => pm.environment.set(link.rel,link.uri))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"type": "text",
						"value": "{{x-api-key}}"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/vnd.whispir.workspace-v1+json"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/vnd.whispir.workspace-v1+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"projectName\": \"Workspace {{$timestamp}}\",\r\n  \"projectNumber\": \"{{$randomInt}}\",\r\n  \"status\": \"A\",\r\n  \"billingcostcentre\": \"{{$guid}}\"\r\n}"
				},
				"url": {
					"raw": "{{createWorkspaces}}",
					"host": [
						"{{createWorkspaces}}"
					]
				},
				"description": "Creates a new workspace.  Workspaces are unique by name.  The new Workspace is referred to by _workspace-location_ and each of the accessible methods are stored in environment variables."
			},
			"response": []
		},
		{
			"name": "Update Workspace",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{x-api-key}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/vnd.whispir.workspace-v1+json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/vnd.whispir.workspace-v1+json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"projectName\": \"Workspace {{$timestamp}}\",\r\n  \"projectNumber\": \"{{$randomInt}}\",\r\n  \"status\": \"A\",\r\n  \"billingcostcentre\": \"{{$guid}}\"\r\n}"
				},
				"url": {
					"raw": "{{editWorkspaces}}",
					"host": [
						"{{editWorkspaces}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{whispir-password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{whispir-username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
